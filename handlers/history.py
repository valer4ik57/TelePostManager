# handlers/history.py
import sqlite3
from datetime import datetime
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder  # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
import logging # –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç



# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ loader –∏ utils
from loader import get_db
from bot_utils import get_main_keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot_utils
from bot_utils import escape_html # <--- –î–û–ë–ê–í–ò–¢–¨ –ò–ú–ü–û–†–¢

router = Router()

POSTS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å—Ç–æ—Ä–∏–∏


@router.message(Command("history"))
@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history_command(message: types.Message):
    # –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await display_history_page(message, page=0)


async def display_history_page(message_or_callback: types.Message | types.CallbackQuery, page: int):
    db = get_db()
    offset = page * POSTS_PER_PAGE

    try:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_posts_query = db.fetchone("SELECT COUNT(*) FROM posts")
        total_posts = total_posts_query[0] if total_posts_query else 0

        # –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        posts_data = db.fetchall(
            f"""SELECT 
                posts.id, 
                channels.title, 
                posts.content, 
                posts.publish_time, 
                posts.status,
                posts.message_id,  -- ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
                posts.channel_id   -- Telegram ID –∫–∞–Ω–∞–ª–∞
            FROM posts
            JOIN channels ON posts.channel_id = channels.channel_id -- –ò—Å–ø–æ–ª—å–∑—É–µ–º JOIN –≤–º–µ—Å—Ç–æ LEFT JOIN, –µ—Å–ª–∏ –ø–æ—Å—Ç –±–µ–∑ –∫–∞–Ω–∞–ª–∞ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞
            ORDER BY posts.publish_time DESC 
            LIMIT ? OFFSET ?""",
            (POSTS_PER_PAGE, offset)
        )

        if not posts_data and page == 0:  # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤
            response_text = "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞."
            reply_markup = get_main_keyboard()
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.answer(response_text, reply_markup=reply_markup)
            elif isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.edit_text(response_text, reply_markup=reply_markup)
                await message_or_callback.answer()
            return

        if not posts_data and page > 0:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–Ω–æ –±—ã–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)
            response_text = "üì≠ –ë–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏."
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            builder = InlineKeyboardBuilder()
            if page > 0:
                builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_page_{page - 1}")
            builder.button(text="üè† –í –º–µ–Ω—é", callback_data="history_to_main_menu")
            reply_markup = builder.as_markup()

            if isinstance(message_or_callback, types.Message):  # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è –¥–ª—è page > 0 –±–µ–∑ –∫–æ–ª–ª–±—ç–∫–∞
                await message_or_callback.answer(response_text, reply_markup=reply_markup)
            elif isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.edit_text(response_text, reply_markup=reply_markup)
                await message_or_callback.answer()
            return

        response_parts = [f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):</b>\n"]
        for post_id, ch_title, content, pub_time_iso, status, msg_id, ch_id_tg in posts_data:
            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            safe_ch_title = escape_html(ch_title)
            safe_content_preview = escape_html(
                content[:70] + "..." if content and len(content) > 70 else (content or ""))

            # ... (–ª–æ–≥–∏–∫–∞ publish_time_str, status_emoji) ...
            publish_time_dt = datetime.fromisoformat(pub_time_iso)
            publish_time_str = escape_html(publish_time_dt.strftime('%d.%m.%Y %H:%M'))

            status_emoji = {
                "published": "‚úÖ",
                "scheduled": "‚è≥",
                "failed": "‚ùå",
                "cancelled": "üö´"  # –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            }.get(status, "‚ùì")

            safe_status_capitalized = escape_html(status.capitalize())

            post_link_html = ""
            if status == "published" and msg_id and ch_id_tg:
                channel_id_str_for_link = str(ch_id_tg).replace('-100', '')
                # URL —Å–∞–º –ø–æ —Å–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è href, –Ω–æ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ - –¥–∞
                link_url = f"https://t.me/c/{channel_id_str_for_link}/{msg_id}"
                post_link_html = f' (<a href="{link_url}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>)'

            response_parts.append(
                f"üÜî <b>–ü–æ—Å—Ç:</b> {post_id}\n"
                f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {safe_ch_title}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {publish_time_str}\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {safe_content_preview}\n"
                f"üî∏ <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {safe_status_capitalized}{post_link_html}\n"
            )

        response_text = "\n".join(response_parts)

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        row_buttons = []
        if page > 0:
            row_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"history_page_{page - 1}"))

        total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
        if page < total_pages - 1:
            row_buttons.append(types.InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"history_page_{page + 1}"))

        if row_buttons:
            builder.row(*row_buttons)
        builder.row(types.InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="history_to_main_menu"))


        parse_mode_to_use = "HTML" # <--- HTML

        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(response_text, reply_markup=builder.as_markup(),
                                             parse_mode=parse_mode_to_use, disable_web_page_preview=True)
        elif isinstance(message_or_callback, types.CallbackQuery):
            # ... (–ø—Ä–æ–≤–µ—Ä–∫–∞ MessageNotModified) ...
            await message_or_callback.message.edit_text(response_text, reply_markup=builder.as_markup(),
                                                        parse_mode=parse_mode_to_use, disable_web_page_preview=True)
            await message_or_callback.answer()

    except sqlite3.Error as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        print(error_msg)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(error_msg, reply_markup=get_main_keyboard())
        elif isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(error_msg)  # reply_markup –Ω–µ –º–µ–Ω—è–µ–º –∏–ª–∏ —Å—Ç–∞–≤–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message_or_callback.answer("–û—à–∏–±–∫–∞ –ë–î", show_alert=True)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        print(error_msg)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(error_msg, reply_markup=get_main_keyboard())
        elif isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(error_msg)
            await message_or_callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)


logger_history = logging.getLogger(__name__) # –°–æ–∑–¥–∞–π—Ç–µ –ª–æ–≥–≥–µ—Ä
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(F.data == "history_to_main_menu")
async def history_back_to_main_menu(callback: types.CallbackQuery):
    logger_history.info(f"!!! ATTENTION: history_to_main_menu CALLED by user {callback.from_user.id} !!!")
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –∏–ª–∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        await callback.message.edit_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=None)
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: await callback.message.delete() # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        logger_history.error(f"Error editing/deleting message in history_to_main_menu: {e}", exc_info=True)
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        pass # –û—à–∏–±–∫–∞ –∑–¥–µ—Å—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ ReplyKeyboard
    try:
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    except Exception as e:
        logger_history.error(f"Error sending main menu message in history_to_main_menu: {e}", exc_info=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í –º–µ–Ω—é" –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(F.data == "history_to_main_menu")
async def history_back_to_main_menu(callback: types.CallbackQuery):
    logger_history.info(f"!!! ATTENTION: history_to_main_menu CALLED by user {callback.from_user.id} !!!")
    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
        await callback.message.edit_reply_markup(reply_markup=None)
        # –∏–ª–∏ await callback.message.delete() # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        logger_history.error(f"Error modifying/deleting message in history_to_main_menu: {e}", exc_info=True)
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ ReplyKeyboard
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())