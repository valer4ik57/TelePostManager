import sqlite3  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from datetime import datetime
from aiogram import Router, types, F
from aiogram.filters import Command
from models.database import Database
from config import DATABASE_NAME

router = Router()
db = Database(DATABASE_NAME)


@router.message(Command("history"))
async def show_history(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    try:
        posts = db.cursor.execute(
            """SELECT 
                posts.id, 
                channels.title, 
                posts.content, 
                posts.publish_time, 
                posts.status 
            FROM posts
            LEFT JOIN channels 
                ON posts.channel_id = channels.channel_id
            ORDER BY posts.publish_time DESC 
            LIMIT 5"""
        ).fetchall()

        if not posts:
            return await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞")

        response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n\n"
        for post in posts:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            publish_time = datetime.fromisoformat(post[3]).strftime('%d.%m.%Y %H:%M')

            response += (
                f"üÜî ID: {post[0]}\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {post[1]}\n"
                f"‚è∞ –í—Ä–µ–º—è: {publish_time}\n"
                f"üìù –¢–µ–∫—Å—Ç: {post[2][:50]}...\n"
                f"üî∏ –°—Ç–∞—Ç—É—Å: {post[4]}\n\n"
            )

        await message.answer(response)

    except sqlite3.Error as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history_handler(message: types.Message):
    await show_history(message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é