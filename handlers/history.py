import sqlite3
from datetime import datetime
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from loader import get_db
from bot_utils import get_main_keyboard, escape_html

router = Router()
logger = logging.getLogger(__name__)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –∏–∑ logging

POSTS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å—Ç–æ—Ä–∏–∏


@router.message(Command("history"))
@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history_command(message: types.Message):
    await display_history_page(message, page=0)


async def display_history_page(message_or_callback: types.Message | types.CallbackQuery, page: int):
    db = get_db()
    current_user_id = message_or_callback.from_user.id
    offset = page * POSTS_PER_PAGE

    try:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –î–õ–Ø –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        total_posts_query = db.fetchone(
            "SELECT COUNT(*) FROM posts WHERE user_id = ?",
            (current_user_id,)
        )
        total_posts = total_posts_query[0] if total_posts_query else 0

        # –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–õ–Ø –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LEFT JOIN, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        posts_data = db.fetchall(
            f"""SELECT 
                p.id, 
                ch.title,        -- –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã channels (–º–æ–∂–µ—Ç –±—ã—Ç—å NULL)
                p.content, 
                p.publish_time, 
                p.status,
                p.message_id,    -- ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
                p.channel_id     -- Telegram ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã posts
            FROM posts p
            LEFT JOIN channels ch ON p.channel_id = ch.channel_id AND p.user_id = ch.user_id 
            WHERE p.user_id = ?
            ORDER BY p.publish_time DESC 
            LIMIT ? OFFSET ?""",
            (current_user_id, POSTS_PER_PAGE, offset)
        )

        if not posts_data and page == 0:
            response_text = "üì≠ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞."
            reply_markup = get_main_keyboard()  # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –¥–ª—è –∫–æ–ª–ª–±—ç–∫–∞
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.answer(response_text, reply_markup=reply_markup)
            elif isinstance(message_or_callback, types.CallbackQuery):
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–ª–±—ç–∫ –∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_or_callback.message.edit_text(response_text, reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
                await message_or_callback.answer()
            return

        if not posts_data and page > 0:
            response_text = "üì≠ –ë–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏."
            builder = InlineKeyboardBuilder()
            if page > 0:  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å, –µ—Å–ª–∏ page > 0
                builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_page_{page - 1}")
            builder.button(text="üè† –í –º–µ–Ω—é", callback_data="history_to_main_menu")  # –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é
            reply_markup = builder.as_markup()

            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.edit_text(response_text, reply_markup=reply_markup)
                await message_or_callback.answer()
            # –î–ª—è message —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (page > 0 –∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤) –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, —Ç.–∫. history_page –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
            return

        response_parts = [f"üìú <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):</b>\n"]
        for post_id, ch_title_from_db, content, pub_time_iso, status, msg_id, ch_id_tg_from_post in posts_data:

            safe_content_preview = escape_html(
                content[:70] + "..." if content and len(content) > 70 else (content or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]")
            )

            publish_time_dt = datetime.fromisoformat(pub_time_iso)
            publish_time_str = escape_html(publish_time_dt.strftime('%d.%m.%Y %H:%M'))

            status_emoji = {
                "published": "‚úÖ", "scheduled": "‚è≥", "failed": "‚ùå", "cancelled": "üö´"
            }.get(status, "‚ùì")
            safe_status_capitalized = escape_html(status.capitalize())

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            safe_ch_title_display: str
            if ch_title_from_db:
                safe_ch_title_display = escape_html(ch_title_from_db)
            else:
                # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –µ–≥–æ —Å–ø–∏—Å–∫–∞ `channels` (–∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥ —ç—Ç–∏–º user_id)
                escaped_ch_id_tg = escape_html(str(ch_id_tg_from_post))
                safe_ch_title_display = f"<i>–ö–∞–Ω–∞–ª (ID: <code>{escaped_ch_id_tg}</code>)</i>"

            post_link_html = ""
            if status == "published" and msg_id and ch_id_tg_from_post:
                channel_id_str_for_link = str(ch_id_tg_from_post).replace('-100', '')
                link_url = f"https://t.me/c/{channel_id_str_for_link}/{msg_id}"
                post_link_html = f' (<a href="{link_url}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>)'

            response_parts.append(
                f"üÜî <b>–ü–æ—Å—Ç:</b> {post_id}\n"
                f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {safe_ch_title_display}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {publish_time_str}\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {safe_content_preview}\n"
                f"üî∏ <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {safe_status_capitalized}{post_link_html}\n"
            )

        response_text = "\n".join(response_parts)
        builder = InlineKeyboardBuilder()
        row_buttons = []
        if page > 0:
            row_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"history_page_{page - 1}"))

        total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
        if page < total_pages - 1:
            row_buttons.append(types.InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"history_page_{page + 1}"))

        if row_buttons:
            builder.row(*row_buttons)
        builder.row(types.InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="history_to_main_menu"))

        parse_mode_to_use = "HTML"

        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(response_text, reply_markup=builder.as_markup(),
                                             parse_mode=parse_mode_to_use, disable_web_page_preview=True)
        elif isinstance(message_or_callback, types.CallbackQuery):
            try:
                await message_or_callback.message.edit_text(response_text, reply_markup=builder.as_markup(),
                                                            parse_mode=parse_mode_to_use, disable_web_page_preview=True)
            except types.TelegramBadRequest as e:
                if "message is not modified" in str(e).lower():
                    logger.debug("Message not modified in history page display.")
                else:
                    raise  # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            await message_or_callback.answer()

    except sqlite3.Error as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        logger.error(error_msg, exc_info=True)
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(error_msg, reply_markup=get_main_keyboard())
        elif isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(error_msg, reply_markup=None)
            await message_or_callback.answer("–û—à–∏–±–∫–∞ –ë–î", show_alert=True)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        logger.error(error_msg, exc_info=True)
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(error_msg, reply_markup=get_main_keyboard())
        elif isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(error_msg, reply_markup=None)
            await message_or_callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("history_page_"))
async def process_history_page_callback(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[2])
    await display_history_page(callback, page=page)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í –º–µ–Ω—é" –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(F.data == "history_to_main_menu")
async def history_back_to_main_menu(callback: types.CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked 'history_to_main_menu'")
    await callback.answer()

    try:
        # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error editing reply markup in history_to_main_menu: {e}", exc_info=True)
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ ReplyKeyboard
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())