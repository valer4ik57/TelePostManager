from aiogram import Router, types, F
from aiogram.filters import Command, CommandObject

from loader import content_filter, get_db  # –î–æ–±–∞–≤–ª—è–µ–º get_db
from filters.admin import IsAdmin
from bot_utils import escape_html

router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


@router.message(Command("add_banned_word"))
async def admin_add_banned_word(message: types.Message, command: CommandObject):
    if command.args is None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/add_banned_word –ø–ª–æ—Ö–æ–π</code>",
            parse_mode="HTML"
        )
        return

    word_to_add = command.args.strip().lower()
    if not word_to_add:
        await message.answer("–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if " " in word_to_add:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞ –ø–æ –æ–¥–Ω–æ–º—É, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return

    if len(word_to_add) > 50:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    if word_to_add in content_filter.banned_words:
        await message.answer(f"–°–ª–æ–≤–æ ¬´{escape_html(word_to_add)}¬ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        return

    if content_filter.add_word(word_to_add):
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ ¬´{escape_html(word_to_add)}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ¬´{escape_html(word_to_add)}¬ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


@router.message(Command("remove_banned_word"))
async def admin_remove_banned_word(message: types.Message, command: CommandObject):
    if command.args is None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/remove_banned_word –ø–ª–æ—Ö–æ–π</code>",
            parse_mode="HTML"
        )
        return

    word_to_remove = command.args.strip().lower()
    if not word_to_remove:
        await message.answer("–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if word_to_remove not in content_filter.banned_words:
        await message.answer(f"–°–ª–æ–≤–∞ ¬´{escape_html(word_to_remove)}¬ª –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.")
        return

    if content_filter.remove_word(word_to_remove):
        await message.answer(f"üóëÔ∏è –°–ª–æ–≤–æ ¬´{escape_html(word_to_remove)}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ¬´{escape_html(word_to_remove)}¬ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


@router.message(Command("list_banned_words"))
async def admin_list_banned_words(message: types.Message):
    if not content_filter.banned_words:
        await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
        return

    header = "üìú <b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:</b>\n\n"
    words_text = ""
    message_parts = []

    for word in sorted(content_filter.banned_words):
        word_line = f"‚Ä¢ <code>{escape_html(word)}</code>\n"
        if len(header) + len(words_text) + len(word_line) > 4000:
            message_parts.append(header + words_text)
            words_text = ""
            header = ""
        words_text += word_line

    if words_text or not message_parts:
        message_parts.append(header + words_text)

    for part in message_parts:
        if part.strip():
            await message.answer(part, parse_mode="HTML")


# --- –ù–û–í–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ---

@router.message(Command("admin_stats"))
async def admin_stats(message: types.Message):
    db = get_db()
    stats_text_parts = ["üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"]

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users_count = db.fetchone("SELECT COUNT(*) FROM bot_users")[0]
    admins_count = db.fetchone("SELECT COUNT(*) FROM bot_users WHERE is_admin = TRUE")[0]
    stats_text_parts.append(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {users_count}")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –ò–∑ –Ω–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞: {admins_count}\n")

    # –ö–∞–Ω–∞–ª—ã
    channels_count = db.fetchone("SELECT COUNT(*) FROM channels")[0]
    stats_text_parts.append(f"<b>–ö–∞–Ω–∞–ª—ã:</b>")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {channels_count}\n")

    # –ü–æ—Å—Ç—ã
    posts_total_count = db.fetchone("SELECT COUNT(*) FROM posts")[0]
    posts_scheduled = db.fetchone("SELECT COUNT(*) FROM posts WHERE status = 'scheduled'")[0]
    posts_published = db.fetchone("SELECT COUNT(*) FROM posts WHERE status = 'published'")[0]
    posts_failed = db.fetchone("SELECT COUNT(*) FROM posts WHERE status = 'failed'")[0]
    posts_cancelled = db.fetchone("SELECT COUNT(*) FROM posts WHERE status = 'cancelled'")[0]
    stats_text_parts.append(f"<b>–ü–æ—Å—Ç—ã:</b>")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {posts_total_count}")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {posts_scheduled}")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {posts_published}")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –û—à–∏–±–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {posts_failed}")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {posts_cancelled}\n")

    # –®–∞–±–ª–æ–Ω—ã
    templates_total_count = db.fetchone("SELECT COUNT(*) FROM templates")[0]
    # COMMON_TEMPLATE_USER_ID = 0 (–∏–∑ handlers.templates, –Ω–æ –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –≤ config –∏–ª–∏ –æ–±—â–µ–º –º–µ—Å—Ç–µ)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º 0 –Ω–∞–ø—Ä—è–º—É—é
    templates_common = db.fetchone("SELECT COUNT(*) FROM templates WHERE user_id = 0")[0]
    templates_personal = db.fetchone("SELECT COUNT(*) FROM templates WHERE user_id != 0")[0]
    stats_text_parts.append(f"<b>–®–∞–±–ª–æ–Ω—ã:</b>")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {templates_total_count}")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –û–±—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤: {templates_common}")
    stats_text_parts.append(f"  ‚ñ´Ô∏è –õ–∏—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: {templates_personal}\n")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ APScheduler, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ,
    # –Ω–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ `scheduler.get_jobs()` –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑–∞.

    await message.answer("\n".join(stats_text_parts), parse_mode="HTML")


@router.message(Command("list_users"))
async def admin_list_users(message: types.Message, command: CommandObject):
    db = get_db()
    limit = 10  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if command.args and command.args.isdigit():
        limit = int(command.args)
        if limit <= 0:
            limit = 10
        if limit > 50:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            limit = 50
            await message.answer("‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 50.")

    users_data = db.fetchall(
        """SELECT user_id, username, first_name, is_admin, created_at
           FROM bot_users
           ORDER BY created_at DESC LIMIT ?""",
        (limit,)
    )

    if not users_data:
        await message.answer("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    response_header = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(users_data)} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    user_lines = []
    for user_id, username, first_name, is_admin, created_at_iso in users_data:
        uname = f"@{username}" if username else "N/A"
        fname = first_name if first_name else ""
        admin_status = "üëë Admin" if is_admin else "üë§ User"
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º ISO
        user_lines.append(
            f"üÜî <code>{user_id}</code> ({escape_html(fname) or uname})\n"
            f"   –°—Ç–∞—Ç—É—Å: {admin_status}\n"
            f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {escape_html(created_at_iso.split('.')[0])}\n"  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            f"   ---"
        )

    response_text = response_header + "\n".join(user_lines)

    # –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    MAX_MESSAGE_LENGTH = 4096
    if len(response_text) > MAX_MESSAGE_LENGTH:
        current_part = response_header
        for line in user_lines:
            if len(current_part) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                await message.answer(current_part, parse_mode="HTML")
                current_part = ""  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            current_part += line + "\n"
        if current_part.strip():  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            await message.answer(current_part, parse_mode="HTML")
    else:
        await message.answer(response_text, parse_mode="HTML")