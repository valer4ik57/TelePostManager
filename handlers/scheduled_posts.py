import sqlite3
from datetime import datetime
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from loader import get_db, scheduler  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º scheduler
from bot_utils import get_main_keyboard, escape_html, notify_user
from services.scheduler import remove_scheduled_job  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

router = Router()
logger = logging.getLogger(__name__)

SCHEDULED_POSTS_PER_PAGE = 5


@router.message(Command("my_scheduled"))
@router.message(F.text == "üóìÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç
async def show_scheduled_posts_command(message: types.Message):
    await display_scheduled_posts_page(message, page=0)


async def display_scheduled_posts_page(message_or_callback: types.Message | types.CallbackQuery, page: int):
    db = get_db()
    current_user_id = message_or_callback.from_user.id
    offset = page * SCHEDULED_POSTS_PER_PAGE

    try:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_scheduled_posts_query = db.fetchone(
            "SELECT COUNT(*) FROM posts WHERE user_id = ? AND status = 'scheduled'",
            (current_user_id,)
        )
        total_scheduled_posts = total_scheduled_posts_query[0] if total_scheduled_posts_query else 0

        # –ó–∞–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        scheduled_posts_data = db.fetchall(
            f"""SELECT 
                p.id, 
                ch.title, 
                p.content, 
                p.publish_time,
                p.channel_id -- Telegram ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã posts
            FROM posts p
            LEFT JOIN channels ch ON p.channel_id = ch.channel_id AND p.user_id = ch.user_id
            WHERE p.user_id = ? AND p.status = 'scheduled'
            ORDER BY p.publish_time ASC -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞—á–∞–ª–∞
            LIMIT ? OFFSET ?""",
            (current_user_id, SCHEDULED_POSTS_PER_PAGE, offset)
        )

        if not scheduled_posts_data and page == 0:
            response_text = "üóìÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
            reply_markup = get_main_keyboard() if isinstance(message_or_callback, types.Message) else None
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.answer(response_text, reply_markup=reply_markup)
            elif isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.edit_text(response_text, reply_markup=reply_markup)
                await message_or_callback.answer()
            return

        if not scheduled_posts_data and page > 0:
            response_text = "üóìÔ∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
            builder = InlineKeyboardBuilder()
            if page > 0:
                builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sched_page_{page - 1}")
            builder.button(text="üè† –í –º–µ–Ω—é", callback_data="sched_to_main_menu")
            reply_markup = builder.as_markup()

            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.edit_text(response_text, reply_markup=reply_markup)
                await message_or_callback.answer()
            return

        response_parts = [f"üóìÔ∏è <b>–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):</b>\n"]
        builder = InlineKeyboardBuilder()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        for post_db_id, ch_title_from_db, content, pub_time_iso, ch_id_tg_from_post in scheduled_posts_data:
            safe_content_preview = escape_html(
                content[:50] + "..." if content and len(content) > 50 else (content or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]")
            )
            publish_time_dt = datetime.fromisoformat(pub_time_iso)
            publish_time_str = escape_html(publish_time_dt.strftime('%d.%m.%Y %H:%M'))

            safe_ch_title_display: str
            if ch_title_from_db:
                safe_ch_title_display = escape_html(ch_title_from_db)
            else:
                escaped_ch_id_tg = escape_html(str(ch_id_tg_from_post))
                safe_ch_title_display = f"<i>–ö–∞–Ω–∞–ª (ID: <code>{escaped_ch_id_tg}</code>)</i>"

            response_parts.append(
                f"üîπ <b>ID:</b> {post_db_id}\n"
                f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {safe_ch_title_display}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {publish_time_str}\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {safe_content_preview}\n"
            )
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
            builder.row(
                types.InlineKeyboardButton(
                    text=f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç ID {post_db_id}",
                    callback_data=f"sched_cancel_ask_{post_db_id}"
                )
            )
            response_parts.append("-" * 20)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

        response_text = "\n".join(response_parts)

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"sched_page_{page - 1}"))

        total_pages = (total_scheduled_posts + SCHEDULED_POSTS_PER_PAGE - 1) // SCHEDULED_POSTS_PER_PAGE
        if page < total_pages - 1:
            pagination_buttons.append(
                types.InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"sched_page_{page + 1}"))

        if pagination_buttons:
            builder.row(*pagination_buttons)
        builder.row(types.InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="sched_to_main_menu"))

        parse_mode_to_use = "HTML"

        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(response_text, reply_markup=builder.as_markup(),
                                             parse_mode=parse_mode_to_use, disable_web_page_preview=True)
        elif isinstance(message_or_callback, types.CallbackQuery):
            try:
                await message_or_callback.message.edit_text(response_text, reply_markup=builder.as_markup(),
                                                            parse_mode=parse_mode_to_use, disable_web_page_preview=True)
            except types.TelegramBadRequest as e:
                if "message is not modified" not in str(e).lower(): raise
            await message_or_callback.answer()

    except sqlite3.Error as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}"
        logger.error(error_msg, exc_info=True)
        reply_markup = get_main_keyboard() if isinstance(message_or_callback, types.Message) else None
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(error_msg, reply_markup=reply_markup)
        elif isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(error_msg, reply_markup=reply_markup)
            await message_or_callback.answer("–û—à–∏–±–∫–∞ –ë–î", show_alert=True)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg, exc_info=True)
        reply_markup = get_main_keyboard() if isinstance(message_or_callback, types.Message) else None
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(error_msg, reply_markup=reply_markup)
        elif isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(error_msg, reply_markup=reply_markup)
            await message_or_callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
@router.callback_query(F.data.startswith("sched_page_"))
async def process_scheduled_page_callback(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[2])
    await display_scheduled_posts_page(callback, page=page)


# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
@router.callback_query(F.data == "sched_to_main_menu")
async def scheduled_back_to_main_menu(callback: types.CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked 'sched_to_main_menu'")
    await callback.answer()
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())


# –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
@router.callback_query(F.data.startswith("sched_cancel_ask_"))
async def confirm_cancel_scheduled_post(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    post_db_id_to_cancel = int(callback.data.split("_")[3])
    current_user_id = callback.from_user.id
    db = get_db()

    post_info = db.fetchone(
        "SELECT channel_id, publish_time FROM posts WHERE id = ? AND user_id = ? AND status = 'scheduled'",
        (post_db_id_to_cancel, current_user_id)
    )

    if not post_info:
        await callback.message.edit_text("‚ùå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
                                         reply_markup=None)
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"sched_cancel_do_{post_db_id_to_cancel}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"sched_cancel_no_{post_db_id_to_cancel}")
    )
    await callback.message.edit_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç ID {post_db_id_to_cancel}?",
        reply_markup=builder.as_markup()
    )


# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–µ –æ—Ç–º–µ–Ω—è—Ç—å –ø–æ—Å—Ç)
@router.callback_query(F.data.startswith("sched_cancel_no_"))
async def decline_cancel_scheduled_post(callback: types.CallbackQuery):
    await callback.answer("–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –±—ã–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 0)
    # –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å page –≤ callback_data –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
    await display_scheduled_posts_page(callback, page=0)


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
@router.callback_query(F.data.startswith("sched_cancel_do_"))
async def process_cancel_scheduled_post(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    post_db_id_to_cancel = int(callback.data.split("_")[3])
    current_user_id = callback.from_user.id
    db = get_db()

    # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
    post_info = db.fetchone(
        "SELECT channel_id, publish_time FROM posts WHERE id = ? AND user_id = ? AND status = 'scheduled'",
        (post_db_id_to_cancel, current_user_id)
    )

    if not post_info:
        await callback.message.edit_text("‚ùå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
                                         reply_markup=None)
        return

    job_id = f"post_{post_db_id_to_cancel}"
    removed_from_scheduler = remove_scheduled_job(scheduler, job_id)

    if removed_from_scheduler:
        try:
            db.execute(
                "UPDATE posts SET status = 'cancelled' WHERE id = ? AND user_id = ?",
                (post_db_id_to_cancel, current_user_id),
                commit=True
            )
            if db.cursor.rowcount > 0:
                logger.info(
                    f"User {current_user_id} cancelled scheduled post DB ID {post_db_id_to_cancel}. Status updated. Job removed.")
                await callback.message.edit_text(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç ID {post_db_id_to_cancel} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.",
                                                 reply_markup=None)
                # await notify_user(bot, current_user_id, f"–í–∞—à –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç (ID: {post_db_id_to_cancel}) –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
            else:  # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞
                logger.warning(
                    f"Failed to update status to 'cancelled' for post DB ID {post_db_id_to_cancel} for user {current_user_id}, though job was removed.")
                await callback.message.edit_text(
                    "‚ö†Ô∏è –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î.", reply_markup=None)

        except sqlite3.Error as e_db:
            logger.error(f"DB error updating post {post_db_id_to_cancel} to cancelled: {e_db}", exc_info=True)
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ—Å—Ç–∞. –ü–æ—Å—Ç –º–æ–≥ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.",
                                             reply_markup=None)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤ –ë–î –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –ª–æ–≥–∏–∫—É
    else:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ.
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –µ—â–µ —Ä–∞–∑.
        current_status_info = db.fetchone("SELECT status FROM posts WHERE id = ?", (post_db_id_to_cancel,))
        current_status = current_status_info[0] if current_status_info else "unknown"

        if current_status == 'scheduled':
            # –≠—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–µ—Ç, –∞ –≤ –ë–î 'scheduled'
            logger.error(
                f"Job {job_id} for post {post_db_id_to_cancel} not found in scheduler, but DB status is 'scheduled'. Attempting to set 'failed'.")
            db.execute("UPDATE posts SET status = 'failed' WHERE id = ?", (post_db_id_to_cancel,),
                       commit=True)  # –∏–ª–∏ 'cancelled_error'
            await callback.message.edit_text(
                "‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –ï–≥–æ —Å—Ç–∞—Ç—É—Å –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–æ—à–∏–±–∫–∞'.", reply_markup=None)
        elif current_status == 'published':
            await callback.message.edit_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.", reply_markup=None)
        elif current_status == 'cancelled':
            await callback.message.edit_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω —Ä–∞–Ω–µ–µ.", reply_markup=None)
        else:  # failed –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
            await callback.message.edit_text(
                f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {escape_html(current_status)}.", reply_markup=None)
            logger.warning(
                f"Could not cancel post {post_db_id_to_cancel}. Job not in scheduler. DB status: {current_status}.")

    # –ü–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∏–ª–∏ –≤ –º–µ–Ω—é
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" —Å–Ω–æ–≤–∞.
    # await display_scheduled_posts_page(callback, page=0) # –í–µ—Ä–Ω—É—Ç—å –∫ —Å–ø–∏—Å–∫—É