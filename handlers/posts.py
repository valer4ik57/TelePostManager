import logging
import re
from datetime import datetime, timedelta
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import sqlite3

from loader import get_db, scheduler, content_filter
from bot_utils import get_main_keyboard, get_channels_keyboard, notify_user, notify_post_published, escape_html
from post_states import PostCreation
from services.scheduler import add_scheduled_job

router = Router()
logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏–¥–∞ {[–∏–º—è]}
CUSTOM_VAR_REGEX = re.compile(r"{\[([^\]\[{}]+)\]}")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –∏–∑ —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏.
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å {[–ê–≤—Ç–æ—Ä]} –∏–ª–∏ {[–î–∞—Ç–∞]} –≤ —à–∞–±–ª–æ–Ω–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ–º—É –Ω—É–∂–Ω—ã.

@router.message(Command("new_post"))
@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def start_post_creation(message: types.Message, state: FSMContext):
    db = get_db()
    current_user_id = message.from_user.id

    channels_count_data = db.fetchone(
        "SELECT COUNT(*) FROM channels WHERE user_id = ?", (current_user_id,)
    )
    channels_count = channels_count_data[0] if channels_count_data else 0

    if channels_count == 0:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—à –∫–∞–Ω–∞–ª.\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        return

    templates_data = db.fetchall(
        "SELECT id, name, user_id FROM templates WHERE user_id = 0 OR user_id = ? ORDER BY user_id ASC, name ASC",
        (current_user_id,)
    )

    builder = InlineKeyboardBuilder()
    if templates_data:
        for tpl_id, tpl_name, tpl_user_id in templates_data:
            display_name = escape_html(tpl_name)
            if tpl_user_id == 0:
                display_name += " (–û–±—â–∏–π)"
            builder.row(types.InlineKeyboardButton(text=f"üìÑ {display_name}", callback_data=f"post_tpl_use_{tpl_id}"))
        builder.row(types.InlineKeyboardButton(text="üìù –ë–µ–∑ —à–∞–±–ª–æ–Ω–∞ / –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="post_tpl_skip"))

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç –∫–Ω–æ–ø–∫–∏
        if message.reply_markup and message.reply_markup.resize_keyboard:
            try:
                await message.delete()  # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ /new_post), —Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ
            await message.answer("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é:",
                                 reply_markup=builder.as_markup())
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /new_post, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
            await message.answer("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é:",
                                 reply_markup=builder.as_markup())

        await state.set_state(PostCreation.SELECT_TEMPLATE)
    else:
        await message.answer("–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é.")
        channels_kb_markup = await get_channels_keyboard(user_id=current_user_id)
        if not channels_kb_markup.inline_keyboard:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É –≤–∞—Å. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.",
                                 reply_markup=get_main_keyboard())
            await state.clear()
            return
        await message.answer("üìå –í –∫–∞–∫–æ–π –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=channels_kb_markup)
        await state.set_state(PostCreation.SELECT_CHANNEL)
        await state.update_data(template_id=None, raw_template_content=None, template_media_id=None,
                                template_media_type=None,
                                variables_values={})  # variables_values –≤–º–µ—Å—Ç–æ custom_vars_values


@router.callback_query(F.data.startswith("post_tpl_use_"), PostCreation.SELECT_TEMPLATE)
async def process_template_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    template_id = int(callback.data.split("_")[3])
    current_user_id = callback.from_user.id
    db = get_db()

    template_data_row = db.fetchone(
        "SELECT name, content, media, media_type FROM templates WHERE id = ? AND (user_id = 0 OR user_id = ?)",
        (template_id, current_user_id)
    )

    if not template_data_row:
        await callback.message.edit_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    tpl_name, tpl_content, tpl_media_id, tpl_media_type = template_data_row

    found_variables = list(dict.fromkeys(CUSTOM_VAR_REGEX.findall(tpl_content or "")))

    await state.update_data(
        original_message_id=callback.message.message_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —à–∞–±–ª–æ–Ω–∞
        template_id=template_id,
        template_name=tpl_name,
        raw_template_content=tpl_content,
        template_media_id=tpl_media_id,
        template_media_type=tpl_media_type,
        variables_to_fill=found_variables,
        current_variable_index=0,
        variables_values={}
    )

    if found_variables:
        next_var_name = found_variables[0]
        await callback.message.edit_text(
            f"–®–∞–±–ª–æ–Ω ¬´{escape_html(tpl_name)}¬ª –≤—ã–±—Ä–∞–Ω.\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>{escape_html(next_var_name)}</code>:",
            parse_mode="HTML"
        )
        await state.set_state(PostCreation.FILL_CUSTOM_VARIABLES)
    else:
        await callback.message.edit_text(
            f"‚ú® –®–∞–±–ª–æ–Ω ¬´{escape_html(tpl_name)}¬ª –≤—ã–±—Ä–∞–Ω. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ—Ç.")

        channels_kb_markup = await get_channels_keyboard(user_id=current_user_id)
        if not channels_kb_markup.inline_keyboard:
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–æ–≤—ã–º, —Ç.–∫. –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.",
                                          reply_markup=get_main_keyboard())
            await state.clear()
            return
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–æ–≤—ã–º
        await callback.message.answer("üìå –í –∫–∞–∫–æ–π –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=channels_kb_markup)
        await state.set_state(PostCreation.SELECT_CHANNEL)


@router.callback_query(F.data == "post_tpl_skip", PostCreation.SELECT_TEMPLATE)
async def process_no_template(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    current_user_id = callback.from_user.id
    await state.update_data(
        original_message_id=callback.message.message_id,
        template_id=None, raw_template_content=None, template_media_id=None,
        template_media_type=None, variables_values={}
    )

    channels_kb_markup = await get_channels_keyboard(user_id=current_user_id)
    if not channels_kb_markup.inline_keyboard:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.",
                                      reply_markup=get_main_keyboard())
        await state.clear()
        return
    await callback.message.edit_text("üìå –®–∞–±–ª–æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í –∫–∞–∫–æ–π –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?",
                                     reply_markup=channels_kb_markup)
    await state.set_state(PostCreation.SELECT_CHANNEL)


@router.message(PostCreation.FILL_CUSTOM_VARIABLES, F.text)
async def process_fill_custom_variable(message: types.Message, state: FSMContext):
    user_input_value = message.text
    # current_user_id = message.from_user.id # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é

    fsm_data = await state.get_data()
    variables_to_fill = fsm_data.get('variables_to_fill', [])
    current_index = fsm_data.get('current_variable_index', 0)

    if current_index >= len(variables_to_fill):  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–º–µ–Ω–∏–ª–æ—Å—å
        logger.warning(f"User {message.from_user.id} in FILL_CUSTOM_VARIABLES, but index out of bounds.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ —Å /cancel.",
                             reply_markup=get_main_keyboard())
        await state.clear()
        return

    var_name_being_filled = variables_to_fill[current_index]

    found_banned_words = content_filter.check_text(user_input_value)
    if found_banned_words:
        await message.answer(
            f"‚ùå –í –∑–Ω–∞—á–µ–Ω–∏–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>{escape_html(var_name_being_filled)}</code> "
            f"–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
            f"<code>{escape_html(', '.join(found_banned_words))}</code>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <code>{escape_html(var_name_being_filled)}</code>:",
            parse_mode="HTML"
        )
        return

    variables_values = fsm_data.get('variables_values', {})
    variables_values[var_name_being_filled] = user_input_value

    current_index += 1
    await state.update_data(variables_values=variables_values, current_variable_index=current_index)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    try:
        await message.delete()
    except:
        pass

    if current_index < len(variables_to_fill):
        next_var_name = variables_to_fill[current_index]
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        original_bot_message_id = fsm_data.get("original_message_id")  # –≠—Ç–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —à–∞–±–ª–æ–Ω–∞/–ø—Ä–æ–ø—É—Å–∫–æ–º
        # –∏–ª–∏ ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
        # –ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –Ω—É–∂–Ω–æ –µ–≥–æ ID –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å/—Å–æ—Ö—Ä–∞–Ω—è—Ç—å
        # –ü–æ–∫–∞ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∞ —Å—Ç–∞—Ä–æ–µ —É–¥–∞–ª—è—Ç—å (–µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        # –°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –µ—Å–ª–∏ –º—ã –µ–≥–æ –Ω–µ —É–¥–∞–ª–∏–º –∏–ª–∏ –Ω–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º.
        # –î–ª—è –ª—É—á—à–µ–≥–æ UX, –ª—É—á—à–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.

        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{escape_html(var_name_being_filled)}' –ø—Ä–∏–Ω—è—Ç–æ.\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>{escape_html(next_var_name)}</code>:",
            parse_mode="HTML"
        )
    else:
        # –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        # (–µ—Å–ª–∏ –±—ã –º—ã –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏)
        await message.answer("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")

        channels_kb_markup = await get_channels_keyboard(user_id=message.from_user.id)
        if not channels_kb_markup.inline_keyboard:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.",
                                 reply_markup=get_main_keyboard())
            await state.clear()
            return
        await message.answer("üìå –í –∫–∞–∫–æ–π –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=channels_kb_markup)
        await state.set_state(PostCreation.SELECT_CHANNEL)


@router.callback_query(F.data.startswith("channel_"), PostCreation.SELECT_CHANNEL)
async def process_channel_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    selected_channel_telegram_id = int(callback.data.split("_")[1])
    current_user_id = callback.from_user.id
    db = get_db()

    channel_data_row = db.fetchone(
        "SELECT title FROM channels WHERE channel_id = ? AND user_id = ?",
        (selected_channel_telegram_id, current_user_id)
    )

    if not channel_data_row:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        await callback.message.edit_text(
            "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    channel_title = channel_data_row[0]
    escaped_channel_title = escape_html(channel_title)
    await state.update_data(
        selected_channel_id=selected_channel_telegram_id,
        selected_channel_title=channel_title
    )

    fsm_data = await state.get_data()
    final_post_text = ""  # –ë—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∑–¥–µ—Å—å

    if fsm_data.get('template_id') is not None:
        raw_template_content = fsm_data.get('raw_template_content', '')
        variables_values = fsm_data.get('variables_values', {})

        processed_text = raw_template_content
        for var_name, var_value in variables_values.items():
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ banned_words –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–µ–Ω
            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å var_value –Ω–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—Å—Ç–∞–≤–ª—è—Ç—å HTML –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            # –ù–æ –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –æ–±–µ–∑–æ–ø–∞—Å–∏—Ç—å –≤—ã–≤–æ–¥, —Ç–æ –ª—É—á—à–µ var_value —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è var_value, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç,
            # –∏–ª–∏ –º—ã –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É content_filter –¥–ª—è var_value.
            processed_text = processed_text.replace(f"{{[{var_name}]}}", var_value)
            # –£–±—Ä–∞–ª escape_html(var_value) –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ HTML –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

        final_post_text = processed_text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        found_banned_final = content_filter.check_text(final_post_text)
        if found_banned_final:
            await callback.message.edit_text(  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
                f"‚ùå –í —Ç–µ–∫—Å—Ç–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞ ¬´{escape_html(fsm_data.get('template_name'))}¬ª "
                f"–ø–æ—Å–ª–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
                f"<code>{escape_html(', '.join(found_banned_final))}</code>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_keyboard(), parse_mode="HTML"
            )
            await state.clear()
            return

        await state.update_data(final_post_content=final_post_text)

        msg_text_after_channel_select = f"‚úÖ –ö–∞–Ω–∞–ª ¬´{escaped_channel_title}¬ª –≤—ã–±—Ä–∞–Ω.\n"
        if fsm_data.get('template_media_id'):
            await state.update_data(
                final_post_media_id=fsm_data.get('template_media_id'),
                final_post_media_type=fsm_data.get('template_media_type')
            )
            msg_text_after_channel_select += "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç (—Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏) –∏ –º–µ–¥–∏–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞.\n"
            msg_text_after_channel_select += "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '—Å–µ–π—á–∞—Å'):"
            await state.set_state(PostCreation.SCHEDULE)
        else:
            msg_text_after_channel_select += "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ (—Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏).\n"
            msg_text_after_channel_select += "üìé –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip_media."
            await state.set_state(PostCreation.MEDIA)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        await callback.message.edit_text(msg_text_after_channel_select, parse_mode="HTML",
                                         reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞

    else:  # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        await callback.message.edit_text(f"‚úÖ –ö–∞–Ω–∞–ª ¬´{escaped_channel_title}¬ª –≤—ã–±—Ä–∞–Ω.\n"
                                         "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:",
                                         parse_mode="HTML", reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
        await state.set_state(PostCreation.CONTENT)


@router.message(PostCreation.CONTENT, F.text)
async def process_post_content(message: types.Message, state: FSMContext):
    post_text = message.text
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å—Ç–∞
    try:
        await message.delete()
    except:
        pass

    found_banned_words = content_filter.check_text(post_text)
    if found_banned_words:
        await message.answer(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            f"‚ùå –í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
            f"<code>{escape_html(', '.join(found_banned_words))}</code>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ (–∏–ª–∏ /cancel).",  # –î–æ–±–∞–≤–∏–ª /cancel
            parse_mode="HTML"
        )
        return  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CONTENT, –∂–¥–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥

    await state.update_data(final_post_content=post_text)  # –ó–¥–µ—Å—å –Ω–µ—Ç –∞–≤—Ç–æ-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    await message.answer("üìé –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip_media.")
    await state.set_state(PostCreation.MEDIA)


@router.message(PostCreation.MEDIA, F.photo | F.video)
async def process_post_media(message: types.Message, state: FSMContext):
    media_id = None
    media_type = None
    if message.photo:
        media_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.video:
        media_id = message.video.file_id
        media_type = "video"

    if not media_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /skip_media.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–¥–∏–∞
    try:
        await message.delete()
    except:
        pass

    await state.update_data(final_post_media_id=media_id, final_post_media_type=media_type)
    await message.answer("‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n"
                         "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–µ–π—á–∞—Å'):")
    await state.set_state(PostCreation.SCHEDULE)


@router.message(PostCreation.MEDIA, Command("skip_media"))
async def process_skip_media(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /skip_media
    try:
        await message.delete()
    except:
        pass
    await state.update_data(final_post_media_id=None, final_post_media_type=None)
    await message.answer("–•–æ—Ä–æ—à–æ, –ø–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ –º–µ–¥–∏–∞.\n"
                         "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–µ–π—á–∞—Å'):")
    await state.set_state(PostCreation.SCHEDULE)


@router.message(PostCreation.SCHEDULE, F.text)
async def process_schedule_time(message: types.Message, state: FSMContext):
    time_str = message.text.strip().lower()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    try:
        await message.delete()
    except:
        pass

    publish_time_dt: datetime
    if time_str == "—Å–µ–π—á–∞—Å":
        publish_time_dt = datetime.now()
    else:
        try:
            publish_time_dt = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
            if publish_time_dt < datetime.now() - timedelta(minutes=1):
                await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ '—Å–µ–π—á–∞—Å'.")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '—Å–µ–π—á–∞—Å'.")
            return

    await state.update_data(publish_time_iso=publish_time_dt.isoformat())
    current_data = await state.get_data()

    # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –£–ñ–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
    # (–ª–∏–±–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π, –ª–∏–±–æ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
    text_for_preview = current_data.get('final_post_content', "[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –µ—â–µ —Ä–∞–∑ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
    found_banned_preview = content_filter.check_text(text_for_preview)
    if found_banned_preview:
        await message.answer(
            f"‚ùå –í –∏—Ç–æ–≥–æ–≤–æ–º —Ç–µ–∫—Å—Ç–µ –ø–æ—Å—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
            f"<code>{escape_html(', '.join(found_banned_preview))}</code>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard(), parse_mode="HTML"
        )
        await state.clear()
        return

    channel_title_for_preview = escape_html(current_data.get('selected_channel_title', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"))
    publish_time_str_for_preview = escape_html(publish_time_dt.strftime('%d.%m.%Y %H:%M'))
    final_media_id = current_data.get('final_post_media_id')
    final_media_type = current_data.get('final_post_media_type')

    preview_caption_parts = [
        f"‚ú® <b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ü–û–°–¢–ê</b> ‚ú®\n",
        f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {channel_title_for_preview}",
        f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {publish_time_str_for_preview}",
        f"\nüìù <b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>\n{text_for_preview}"
    ]
    preview_caption = "\n".join(preview_caption_parts)

    confirm_kb = InlineKeyboardBuilder()
    confirm_kb.row(
        types.InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_confirm_yes"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_confirm_no")
    )

    parse_mode_to_use = "HTML"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∫ –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
        if final_media_id:
            if final_media_type == "photo":
                sent_preview_message = await message.answer_photo(photo=final_media_id, caption=preview_caption,
                                                                  reply_markup=confirm_kb.as_markup(),
                                                                  parse_mode=parse_mode_to_use)
            elif final_media_type == "video":
                sent_preview_message = await message.answer_video(video=final_media_id, caption=preview_caption,
                                                                  reply_markup=confirm_kb.as_markup(),
                                                                  parse_mode=parse_mode_to_use)
            else:
                sent_preview_message = await message.answer(
                    f"[–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ–¥–∏–∞ (—Ç–∏–ø: {escape_html(final_media_type)}, ID: {escape_html(final_media_id)})]\n\n{preview_caption}",
                    reply_markup=confirm_kb.as_markup(), parse_mode=parse_mode_to_use)
        else:
            sent_preview_message = await message.answer(preview_caption, reply_markup=confirm_kb.as_markup(),
                                                        parse_mode=parse_mode_to_use)

        await state.update_data(
            preview_message_id=sent_preview_message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}", exc_info=True)
        try:
            plain_text_preview = re.sub(r'<[^>]+>', '', preview_caption)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è ID
            if final_media_id:
                await message.answer(
                    f"[–ú–µ–¥–∏–∞ –µ—Å—Ç—å, –Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ —É–¥–∞–ª—Å—è]\n\n{plain_text_preview}",
                    reply_markup=confirm_kb.as_markup())
            else:
                await message.answer(plain_text_preview, reply_markup=confirm_kb.as_markup())
            await message.answer(
                "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ü–æ–∫–∞–∑–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
        except Exception as e_fallback:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –£–ü–†–û–©–ï–ù–ù–û–ì–û –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e_fallback}", exc_info=True)
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.")
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ SCHEDULE, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å /cancel –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

    await state.set_state(PostCreation.CONFIRM)


@router.callback_query(F.data.startswith("post_confirm_"), PostCreation.CONFIRM)
async def process_post_confirmation(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    fsm_data = await state.get_data()
    preview_message_id = fsm_data.get("preview_message_id")

    if preview_message_id:  # –ï—Å–ª–∏ –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        try:
            if callback.message.photo or callback.message.video or callback.message.document:
                await bot.edit_message_caption(chat_id=callback.message.chat.id, message_id=preview_message_id,
                                               caption=callback.message.caption, reply_markup=None)
            else:
                await bot.edit_message_text(text=callback.message.text, chat_id=callback.message.chat.id,
                                            message_id=preview_message_id, reply_markup=None)
        except types.TelegramBadRequest as e_edit_preview:
            if "message to edit not found" in str(e_edit_preview).lower() or "message can't be edited" in str(
                    e_edit_preview).lower() or "message is not modified" in str(e_edit_preview).lower():
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (ID: {preview_message_id}): {e_edit_preview}")
            else:
                logger.error(
                    f"–ù–ï–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (ID: {preview_message_id}): {e_edit_preview}",
                    exc_info=True)
        except Exception as e_edit_preview:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (ID: {preview_message_id}): {e_edit_preview}",
                         exc_info=True)
    else:  # –ï—Å–ª–∏ ID –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä–æ–µ –∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)
        try:
            if callback.message.photo or callback.message.video or callback.message.document:
                await callback.message.edit_caption(caption=callback.message.caption, reply_markup=None)
            else:
                await callback.message.edit_text(text=callback.message.text, reply_markup=None)
        except Exception as e_cb_edit:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É callback-—Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞): {e_cb_edit}")

    action = callback.data.split("_")[2]
    if action == "no":
        await state.clear()
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (—É–±—Ä–∞–Ω—ã –∫–Ω–æ–ø–∫–∏), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
        return

    current_data = fsm_data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ fsm_data
    db = get_db()

    channel_telegram_id = current_data['selected_channel_id']
    channel_title = current_data['selected_channel_title']
    content_to_post = current_data.get('final_post_content', '')  # –¢–µ–∫—Å—Ç –£–ñ–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í
    media_to_post = current_data.get('final_post_media_id')
    media_type_to_post = current_data.get('final_post_media_type')
    publish_time_iso_from_state = current_data['publish_time_iso']
    publish_time_dt = datetime.fromisoformat(publish_time_iso_from_state)
    user_id_creator = callback.from_user.id
    post_status = "scheduled"
    message_to_user = ""

    try:
        cursor = db.execute(
            """INSERT INTO posts (user_id, channel_id, content, media, media_type, publish_time, status)
               VALUES (?, ?, ?, ?, ?, ?, ?)""",
            (user_id_creator, channel_telegram_id, content_to_post, media_to_post, media_type_to_post,
             publish_time_iso_from_state, post_status),
            commit=True
        )
        post_db_id = cursor.lastrowid
        logger.info(
            f"Post (DB ID: {post_db_id}) by user {user_id_creator} for channel {channel_telegram_id} saved to DB with status 'scheduled'.")

        if publish_time_dt <= datetime.now() + timedelta(seconds=20):
            # (–ª–æ–≥–∏–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ)
            logger.info(f"Post (DB ID: {post_db_id}) is for immediate publication.")
            published_message = None
            try:
                if media_to_post:
                    if media_type_to_post == "photo":
                        published_message = await bot.send_photo(chat_id=channel_telegram_id, photo=media_to_post,
                                                                 caption=content_to_post, parse_mode="HTML")
                    elif media_type_to_post == "video":
                        published_message = await bot.send_video(chat_id=channel_telegram_id, video=media_to_post,
                                                                 caption=content_to_post, parse_mode="HTML")
                    else:
                        published_message = await bot.send_message(chat_id=channel_telegram_id,
                                                                   text=f"{content_to_post}\n[–ú–µ–¥–∏–∞—Ñ–∞–π–ª: {escape_html(media_to_post)}]",
                                                                   parse_mode="HTML")
                else:
                    published_message = await bot.send_message(chat_id=channel_telegram_id, text=content_to_post,
                                                               parse_mode="HTML")

                post_status = "published"
                message_id_in_channel = published_message.message_id if published_message else None
                db.execute("UPDATE posts SET status = ?, message_id = ? WHERE id = ?",
                           (post_status, message_id_in_channel, post_db_id), commit=True)
                logger.info(
                    f"Post (DB ID: {post_db_id}) published immediately. Channel Msg ID: {message_id_in_channel}")
                message_to_user = "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
                if message_id_in_channel:
                    await notify_post_published(bot, user_id_creator, channel_telegram_id, message_id_in_channel,
                                                channel_title)

            except Exception as e_publish:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ID {post_db_id}: {e_publish}", exc_info=True)
                post_status = "failed"
                db.execute("UPDATE posts SET status = ? WHERE id = ?", (post_status, post_db_id), commit=True)
                message_to_user = f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {escape_html(str(e_publish))}"
        else:
            scheduler_data = {
                'post_db_id': post_db_id, 'channel_id': channel_telegram_id, 'content': content_to_post,
                'media': media_to_post, 'media_type': media_type_to_post,
                'publish_time': publish_time_dt, 'user_id': user_id_creator, 'channel_title': channel_title
            }
            if add_scheduled_job(scheduler, bot, scheduler_data):
                logger.info(f"Post (DB ID: {post_db_id}) scheduled for {publish_time_dt.strftime('%d.%m.%Y %H:%M')}.")
                message_to_user = (f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {publish_time_dt.strftime('%d.%m.%Y %H:%M')} "
                                   f"–≤ –∫–∞–Ω–∞–ª ¬´{escape_html(channel_title)}¬ª.")
            else:
                logger.error(f"Failed to schedule post DB ID {post_db_id}. Setting status to 'failed'.")
                db.execute("UPDATE posts SET status = 'failed' WHERE id = ?", (post_db_id,), commit=True)
                message_to_user = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ—Å—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    except sqlite3.Error as e_db:
        logger.error(f"DB –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ (user {user_id_creator}): {e_db}", exc_info=True)
        message_to_user = f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {escape_html(str(e_db))}"
    except Exception as e_general:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ (user {user_id_creator}): {e_general}", exc_info=True)
        message_to_user = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {escape_html(str(e_general))}"
    finally:
        await state.clear()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if message_to_user:
            await callback.message.answer(message_to_user, reply_markup=get_main_keyboard(), parse_mode="HTML",
                                          disable_web_page_preview=True)
        else:
            await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.",
                                          reply_markup=get_main_keyboard())