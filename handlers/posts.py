# handlers/posts.py
import logging  # –î–æ–±–∞–≤–∏–º –ª–æ–≥–≥–µ—Ä
from datetime import datetime, timedelta
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import sqlite3

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from loader import get_db, scheduler, content_filter  # main_bot_instance –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, bot –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
from bot_utils import get_main_keyboard, get_channels_keyboard, notify_user, notify_post_published, escape_html
from post_states import PostCreation
from services.scheduler import add_scheduled_job
from handlers.templates import AVAILABLE_TEMPLATE_VARIABLES  # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –∞–∫—Ç—É–∞–ª–µ–Ω

router = Router()
logger = logging.getLogger(__name__)  # –õ–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è


# --- –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ ---
@router.message(Command("new_post"))
@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def start_post_creation(message: types.Message, state: FSMContext):
    db = get_db()
    channels_count_data = db.fetchone("SELECT COUNT(*) FROM channels")  # –ë–µ–∑–æ–ø–∞—Å–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    channels_count = channels_count_data[0] if channels_count_data else 0
    if channels_count == 0:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        return

    templates_data = db.fetchall("SELECT id, name FROM templates ORDER BY name")
    builder = InlineKeyboardBuilder()
    if templates_data:
        for tpl_id, tpl_name in templates_data:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML —Å–∏–º–≤–æ–ª—ã
            builder.row(
                types.InlineKeyboardButton(text=f"üìÑ {escape_html(tpl_name)}", callback_data=f"post_tpl_use_{tpl_id}"))
        builder.row(types.InlineKeyboardButton(text="üìù –ë–µ–∑ —à–∞–±–ª–æ–Ω–∞ / –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="post_tpl_skip"))
        await message.answer("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é:", reply_markup=builder.as_markup())
        await state.set_state(PostCreation.SELECT_TEMPLATE)
    else:
        await message.answer("–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é.")
        channels_kb_markup = await get_channels_keyboard()  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        if not channels_kb_markup.inline_keyboard:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.",
                                 reply_markup=get_main_keyboard())
            await state.clear()
            return
        await message.answer("üìå –í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=channels_kb_markup)
        await state.set_state(PostCreation.SELECT_CHANNEL)
        await state.update_data(template_id=None, template_content=None, template_media_id=None,
                                template_media_type=None)


# --- –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫) ---
@router.callback_query(F.data.startswith("post_tpl_use_"), PostCreation.SELECT_TEMPLATE)
async def process_template_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    template_id = int(callback.data.split("_")[3])
    db = get_db()
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ media_type –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –ë–î —à–∞–±–ª–æ–Ω–æ–≤
    template_data = db.fetchone("SELECT name, content, media, media_type FROM templates WHERE id = ?", (template_id,))

    if not template_data:
        await callback.message.edit_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    tpl_name, tpl_content, tpl_media_id, tpl_media_type = template_data
    await state.update_data(
        template_id=template_id,
        template_name=tpl_name,
        template_content=tpl_content,
        template_media_id=tpl_media_id,
        template_media_type=tpl_media_type  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    )

    if tpl_content and AVAILABLE_TEMPLATE_VARIABLES.get("{—Ç–µ–∫—Å—Ç_–Ω–æ–≤–æ—Å—Ç–∏}") and "{—Ç–µ–∫—Å—Ç_–Ω–æ–≤–æ—Å—Ç–∏}" in tpl_content:
        await callback.message.edit_text(f"üìù –®–∞–±–ª–æ–Ω ¬´{escape_html(tpl_name)}¬ª –≤—ã–±—Ä–∞–Ω.\n"  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º
                                         f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π <code>{{—Ç–µ–∫—Å—Ç_–Ω–æ–≤–æ—Å—Ç–∏}}</code>):",
                                         # –ò—Å–ø–æ–ª—å–∑—É–µ–º code –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                                         parse_mode="HTML")
        await state.set_state(PostCreation.FILL_TEMPLATE)
    else:
        await callback.message.edit_text(
            f"‚ú® –®–∞–±–ª–æ–Ω ¬´{escape_html(tpl_name)}¬ª –≤—ã–±—Ä–∞–Ω. –ó–∞–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        channels_kb_markup = await get_channels_keyboard()
        if not channels_kb_markup.inline_keyboard:
            await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.",
                                          reply_markup=get_main_keyboard())
            await state.clear()
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º edit_text
        await callback.message.answer("üìå –í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=channels_kb_markup)
        await state.set_state(PostCreation.SELECT_CHANNEL)


@router.callback_query(F.data == "post_tpl_skip", PostCreation.SELECT_TEMPLATE)
async def process_no_template(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(template_id=None, template_content=None, template_media_id=None, template_media_type=None)
    channels_kb_markup = await get_channels_keyboard()
    if not channels_kb_markup.inline_keyboard:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    await callback.message.edit_text("üìå –®–∞–±–ª–æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?",
                                     reply_markup=channels_kb_markup)
    await state.set_state(PostCreation.SELECT_CHANNEL)


# --- –≠—Ç–∞–ø 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω—è–µ–º–æ–π —á–∞—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞ ---
@router.message(PostCreation.FILL_TEMPLATE, F.text)
async def process_fill_template_variable(message: types.Message, state: FSMContext):  # bot –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
    user_text_for_template = message.text
    found_banned_words = content_filter.check_text(user_text_for_template)
    if found_banned_words:
        await message.answer(
            f"‚ùå –í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n" +
            f"<code>{escape_html(', '.join(found_banned_words))}</code>\n\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º code –∏ escape_html
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        return

    await state.update_data(user_input_for_template=user_text_for_template)
    channels_kb_markup = await get_channels_keyboard()
    if not channels_kb_markup.inline_keyboard:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    await message.answer("üìå –¢–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç. –í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?",
                         reply_markup=channels_kb_markup)
    await state.set_state(PostCreation.SELECT_CHANNEL)


# --- –≠—Ç–∞–ø 3: –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ ---
@router.callback_query(F.data.startswith("channel_"), PostCreation.SELECT_CHANNEL)
async def process_channel_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    channel_id = int(callback.data.split("_")[1])
    db = get_db()
    channel_data = db.fetchone("SELECT title FROM channels WHERE channel_id = ?", (channel_id,))

    if not channel_data:
        await callback.message.edit_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    channel_title = channel_data[0]
    escaped_channel_title = escape_html(channel_title)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞
    await state.update_data(selected_channel_id=channel_id,
                            selected_channel_title=channel_title)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ

    current_data = await state.get_data()
    if current_data.get('template_id') is not None:
        template_content = current_data.get('template_content', '')
        user_input_for_template = current_data.get('user_input_for_template', '')
        author_name = callback.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"

        final_post_text = template_content
        if "{—Ç–µ–∫—Å—Ç_–Ω–æ–≤–æ—Å—Ç–∏}" in final_post_text:
            final_post_text = final_post_text.replace("{—Ç–µ–∫—Å—Ç_–Ω–æ–≤–æ—Å—Ç–∏}", user_input_for_template)
        final_post_text = final_post_text.replace("{–¥–∞—Ç–∞}", datetime.now().strftime("%d.%m.%Y"))
        final_post_text = final_post_text.replace("{–≤—Ä–µ–º—è}", datetime.now().strftime("%H:%M"))
        final_post_text = final_post_text.replace("{–∞–≤—Ç–æ—Ä}", author_name)

        found_banned_template = content_filter.check_text(final_post_text)
        if found_banned_template:
            await callback.message.edit_text(
                f"‚ùå –í —Ç–µ–∫—Å—Ç–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞ ¬´{escape_html(current_data.get('template_name'))}¬ª, "
                f"–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n<code>{escape_html(', '.join(found_banned_template))}</code>\n\n"
                f"–≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.",
                reply_markup=get_main_keyboard(), parse_mode="HTML"
            )
            await state.clear()
            return

        await state.update_data(final_post_content=final_post_text)

        msg_text_after_channel_select = f"‚úÖ –ö–∞–Ω–∞–ª ¬´{escaped_channel_title}¬ª –≤—ã–±—Ä–∞–Ω.\n"
        if current_data.get('template_media_id'):
            await state.update_data(
                final_post_media_id=current_data.get('template_media_id'),
                final_post_media_type=current_data.get('template_media_type')
            )
            msg_text_after_channel_select += "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞.\n"
            msg_text_after_channel_select += "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '—Å–µ–π—á–∞—Å'):"
            await state.set_state(PostCreation.SCHEDULE)
        else:
            msg_text_after_channel_select += "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞.\n"
            msg_text_after_channel_select += "üìé –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip_media."
            await state.set_state(PostCreation.MEDIA)

        await callback.message.edit_text(msg_text_after_channel_select, parse_mode="HTML")
    else:
        await callback.message.edit_text(f"‚úÖ –ö–∞–Ω–∞–ª ¬´{escaped_channel_title}¬ª –≤—ã–±—Ä–∞–Ω.\n"
                                         "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:", parse_mode="HTML")
        await state.set_state(PostCreation.CONTENT)


# --- –≠—Ç–∞–ø 4: –í–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
@router.message(PostCreation.CONTENT, F.text)
async def process_post_content(message: types.Message, state: FSMContext):
    post_text = message.text
    found_banned_words = content_filter.check_text(post_text)
    if found_banned_words:
        await message.answer(
            f"‚ùå –í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
            f"<code>{escape_html(', '.join(found_banned_words))}</code>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        return

    await state.update_data(final_post_content=post_text)
    await message.answer("üìé –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip_media.")
    await state.set_state(PostCreation.MEDIA)


# --- –≠—Ç–∞–ø 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ ---
@router.message(PostCreation.MEDIA, F.photo | F.video)
async def process_post_media(message: types.Message, state: FSMContext):
    media_id = None
    media_type = None
    if message.photo:
        media_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.video:
        media_id = message.video.file_id
        media_type = "video"
    if not media_id:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∫—Ä—ã—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /skip_media.")
        return
    # –î—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ state, —É–±—Ä–∞–ª –æ–¥–Ω–æ
    await state.update_data(final_post_media_id=media_id, final_post_media_type=media_type)
    await message.answer("‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n"
                         "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–µ–π—á–∞—Å'):")
    await state.set_state(PostCreation.SCHEDULE)


@router.message(PostCreation.MEDIA, Command("skip_media"))
async def process_skip_media(message: types.Message, state: FSMContext):
    await state.update_data(final_post_media_id=None, final_post_media_type=None)
    await message.answer("–•–æ—Ä–æ—à–æ, –ø–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ –º–µ–¥–∏–∞.\n"
                         "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–µ–π—á–∞—Å'):")
    await state.set_state(PostCreation.SCHEDULE)


# --- –≠—Ç–∞–ø 6: –£–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ---
@router.message(PostCreation.SCHEDULE, F.text)
async def process_schedule_time(message: types.Message, state: FSMContext):
    time_str = message.text.strip().lower()
    publish_time_dt: datetime
    if time_str == "—Å–µ–π—á–∞—Å":
        publish_time_dt = datetime.now()
    else:
        try:
            publish_time_dt = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
            if publish_time_dt < datetime.now() - timedelta(
                    minutes=1) and publish_time_dt.date() <= datetime.now().date():  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ '—Å–µ–π—á–∞—Å'.")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '—Å–µ–π—á–∞—Å'.")
            return

    await state.update_data(publish_time=publish_time_dt.isoformat())
    current_data = await state.get_data()
    raw_final_text = current_data.get('final_post_content', "[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]")
    final_text_for_preview = escape_html(raw_final_text)
    channel_title_for_preview = escape_html(current_data.get('selected_channel_title', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"))
    publish_time_str_for_preview = escape_html(publish_time_dt.strftime('%d.%m.%Y %H:%M'))
    final_media_id = current_data.get('final_post_media_id')
    final_media_type = current_data.get('final_post_media_type')

    preview_caption_parts = [
        f"‚ú® <b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ü–û–°–¢–ê</b> ‚ú®\n",
        f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {channel_title_for_preview}",
        f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {publish_time_str_for_preview}",
        f"\nüìù <b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>\n{final_text_for_preview}"
    ]
    preview_caption = "\n".join(preview_caption_parts)
    confirm_kb = InlineKeyboardBuilder()
    confirm_kb.row(
        types.InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_confirm_yes"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post_confirm_no")
    )
    parse_mode_to_use = "HTML"
    try:
        if final_media_id:
            if final_media_type == "photo":
                await message.answer_photo(photo=final_media_id, caption=preview_caption,
                                           reply_markup=confirm_kb.as_markup(), parse_mode=parse_mode_to_use)
            elif final_media_type == "video":
                await message.answer_video(video=final_media_id, caption=preview_caption,
                                           reply_markup=confirm_kb.as_markup(), parse_mode=parse_mode_to_use)
            else:
                logger.warning(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –ù–µ–∏–∑–≤. —Ç–∏–ø –º–µ–¥–∏–∞ ({final_media_type}) ID: {final_media_id}.")
                await message.answer(
                    f"[–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ–¥–∏–∞ (—Ç–∏–ø: {final_media_type}, ID: {escape_html(final_media_id)})]\n\n{preview_caption}",
                    reply_markup=confirm_kb.as_markup(), parse_mode=parse_mode_to_use)
        else:
            await message.answer(preview_caption, reply_markup=confirm_kb.as_markup(), parse_mode=parse_mode_to_use)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.set_state(PostCreation.CONFIRM)


# --- –≠—Ç–∞–ø 7: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è/–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---
@router.callback_query(F.data.startswith("post_confirm_"), PostCreation.CONFIRM)
async def process_post_confirmation(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ

    # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    try:
        if callback.message.photo or callback.message.video or callback.message.document:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
            await callback.message.edit_caption(caption=callback.message.caption,
                                                reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º caption
        else:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(text=callback.message.text,
                                             reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    except Exception as e_edit_preview:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e_edit_preview}")
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

    action = callback.data.split("_")[2]
    if action == "no":
        await state.clear()
        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (—É–±—Ä–∞–Ω—ã –∫–Ω–æ–ø–∫–∏), –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
        return

    current_data = await state.get_data()
    db = get_db()
    channel_id = current_data['selected_channel_id']
    channel_title = current_data['selected_channel_title']  # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —ç—Ç–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    content_to_post = current_data.get('final_post_content', '')
    media_to_post = current_data.get('final_post_media_id')
    media_type_to_post = current_data.get('final_post_media_type')
    publish_time_iso = current_data['publish_time']
    publish_time_dt = datetime.fromisoformat(publish_time_iso)
    user_id_creator = callback.from_user.id
    post_status = "scheduled"

    message_to_user = ""  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ

    try:
        cursor = db.execute(
            """INSERT INTO posts (channel_id, content, media, media_type, publish_time, status, user_id) 
               VALUES (?, ?, ?, ?, ?, ?, ?)""",  # –î–æ–±–∞–≤–∏–ª–∏ media_type
            (channel_id, content_to_post, media_to_post, media_type_to_post,
             publish_time_iso, post_status, user_id_creator),
            commit=True
        )
        post_db_id = cursor.lastrowid

        if publish_time_dt <= datetime.now() + timedelta(seconds=15):  # –£–≤–µ–ª–∏—á–∏–ª –¥–µ–ª—å—Ç—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            published_message = None
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
                if media_to_post:
                    if media_type_to_post == "photo":
                        published_message = await bot.send_photo(chat_id=channel_id, photo=media_to_post,
                                                                 caption=content_to_post, parse_mode="HTML")
                    elif media_type_to_post == "video":
                        published_message = await bot.send_video(chat_id=channel_id, video=media_to_post,
                                                                 caption=content_to_post, parse_mode="HTML")
                    else:  # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –º–µ–¥–∏–∞
                        logger.warning(f"–ù–µ–º–µ–¥–ª. –ø—É–±–ª.: –ù–µ–∏–∑–≤. —Ç–∏–ø –º–µ–¥–∏–∞ ({media_type_to_post}) ID {post_db_id}.")
                        published_message = await bot.send_message(chat_id=channel_id,
                                                                   text=f"{content_to_post}\n[–ú–µ–¥–∏–∞—Ñ–∞–π–ª: {media_to_post}]",
                                                                   parse_mode="HTML")
                else:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    published_message = await bot.send_message(chat_id=channel_id, text=content_to_post,
                                                               parse_mode="HTML")

                post_status = "published"
                message_id_in_channel = published_message.message_id if published_message else None
                db.execute("UPDATE posts SET status = ?, message_id = ? WHERE id = ?",
                           (post_status, message_id_in_channel, post_db_id), commit=True)

                message_to_user = "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
                if message_id_in_channel:  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await notify_post_published(bot, user_id_creator, channel_id, message_id_in_channel, channel_title)

            except Exception as e_publish:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ID {post_db_id}: {e_publish}", exc_info=True)
                post_status = "failed"
                db.execute("UPDATE posts SET status = ? WHERE id = ?", (post_status, post_db_id), commit=True)
                message_to_user = f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {escape_html(str(e_publish))}"
                # await notify_user(bot, user_id_creator, message_to_user) # –£–∂–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏–∂–µ
        else:  # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            scheduler_data = {
                'post_db_id': post_db_id, 'channel_id': channel_id, 'content': content_to_post,
                'media': media_to_post, 'media_type': media_type_to_post,
                'publish_time': publish_time_dt, 'user_id': user_id_creator, 'channel_title': channel_title
            }
            add_scheduled_job(scheduler, bot, scheduler_data)
            message_to_user = (f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {publish_time_dt.strftime('%d.%m.%Y %H:%M')} "
                               f"–≤ –∫–∞–Ω–∞–ª ¬´{escape_html(channel_title)}¬ª.")
            # await notify_user(bot, user_id_creator, message_to_user) # –£–∂–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏–∂–µ

    except sqlite3.Error as e_db:
        logger.error(f"DB –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e_db}", exc_info=True)
        message_to_user = f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {escape_html(str(e_db))}"
    except Exception as e_general:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e_general}", exc_info=True)
        message_to_user = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {escape_html(str(e_general))}"
    finally:
        await state.clear()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if message_to_user:  # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å
            await callback.message.answer(message_to_user, reply_markup=get_main_keyboard(), parse_mode="HTML")
        else:  # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ message_to_user –ø—É—Å—Ç–æ–µ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_main_keyboard())