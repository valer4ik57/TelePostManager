from datetime import datetime
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from models.database import Database
from config import DATABASE_NAME, BANNED_WORDS_FILE
from services.scheduler import add_scheduled_job
from post_states import PostCreation
import sqlite3

router = Router()
db = Database(DATABASE_NAME)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
with open(BANNED_WORDS_FILE, 'r', encoding='utf-8') as f:
    BANNED_WORDS = [word.strip().lower() for word in f.readlines()]


async def get_channels_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"""
    channels = db.cursor.execute("SELECT channel_id, title FROM channels").fetchall()
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=title, callback_data=f"channel_{cid}")]
        for cid, title in channels
    ])


@router.message(Command("new_post"))
async def start_post(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    channels_count = db.cursor.execute("SELECT COUNT(*) FROM channels").fetchone()[0]

    if channels_count == 0:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /add_channel")

    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=await get_channels_keyboard())
    await state.set_state(PostCreation.SELECT_CHANNEL)


@router.callback_query(F.data.startswith("channel_"), PostCreation.SELECT_CHANNEL)
async def select_channel(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    channel_id = int(callback.data.split("_")[1])
    channel = db.cursor.execute(
        "SELECT title FROM channels WHERE channel_id = ?",
        (channel_id,)
    ).fetchone()

    if not channel:
        return await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    await state.update_data(channel_id=channel_id, channel_title=channel[0])
    await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {channel[0]}")
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await state.set_state(PostCreation.CONTENT)


@router.message(PostCreation.CONTENT)
async def process_content(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"""
    content = message.text.lower()

    # –ü–æ–∏—Å–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    found_banned = [word for word in BANNED_WORDS if word in content]

    if found_banned:
        return await message.answer(
            f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n" +
            "\n".join(found_banned) +
            "\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ"
        )

    await state.update_data(content=message.text)
    await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
    await state.set_state(PostCreation.MEDIA)

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ process_media
@router.message(PostCreation.MEDIA, F.photo | F.video)
async def process_media(message: types.Message, state: FSMContext):
    try:
        if message.photo:
            media = message.photo[-1].file_id
        elif message.video:
            media = message.video.file_id
        else:
            return await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ")

        await state.update_data(media=media)
        await message.answer("‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '—Å–µ–π—á–∞—Å'):")
        await state.set_state(PostCreation.SCHEDULE)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {str(e)}")

@router.message(Command("skip"), PostCreation.MEDIA)
async def skip_media(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
    await state.update_data(media=None)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '—Å–µ–π—á–∞—Å'):")
    await state.set_state(PostCreation.SCHEDULE)


@router.message(PostCreation.SCHEDULE)
async def process_schedule(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    time_str = message.text.strip().lower()
    data = await state.get_data()

    try:
        publish_time = (
            datetime.now()
            if time_str == "—Å–µ–π—á–∞—Å"
            else datetime.strptime(time_str, "%d.%m.%Y %H:%M")
        )
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

    await state.update_data(publish_time=publish_time)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview = (
        f"üìã –ü–æ—Å—Ç –¥–ª—è {data['channel_title']}:\n\n"
        f"{data['content']}\n\n"
        f"‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {publish_time.strftime('%d.%m.%Y %H:%M')}"
    )

    if data.get('media'):
        await message.answer_photo(data['media'], caption=preview)
    else:
        await message.answer(preview)

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_yes"),
         types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
    ])

    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:", reply_markup=keyboard)
    await state.set_state(PostCreation.CONFIRM)


@router.callback_query(F.data.startswith("confirm_"))
async def confirm_post(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    action = callback.data.split("_")[1]
    data = await state.get_data()

    if action == "no":
        await callback.message.answer("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
        return await callback.answer()

    try:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
        if data['publish_time'] <= datetime.now():
            method = (
                bot.send_photo if data.get('media')
                else bot.send_message
            )
            post = await method(
                chat_id=data['channel_id'],
                **(dict(photo=data['media'], caption=data['content']) if data.get('media')
                   else dict(text=data['content']))
            )
            status = "published"
        else:
            add_scheduled_job(bot, data)
            status = "scheduled"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        db.cursor.execute(
            """INSERT INTO posts 
            (channel_id, content, media, publish_time, status) 
            VALUES (?, ?, ?, ?, ?)""",
            (
                data['channel_id'],
                data['content'],
                data.get('media'),
                data['publish_time'].isoformat(),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
                status
            )
        )
        db.connection.commit()

        # –í posts.py (–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ confirm_post)
        channel_id_str = str(data['channel_id']).replace('-100', '')  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        await callback.message.answer(
            f"‚úÖ –ü–æ—Å—Ç {'–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' if status == 'published' else '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'}!\n" +
            (f"üëÅ‚Äçüó® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å: https://t.me/c/{channel_id_str}/{post.message_id}"
             if status == 'published' else "")
        )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        db.connection.rollback()

    await state.clear()
    await callback.answer()

@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def start_post_handler(message: types.Message, state: FSMContext):
    await start_post(message, state)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é