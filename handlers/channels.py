# handlers/channels.py
import sqlite3
from aiogram import Router, Bot, types, F
from aiogram.filters import Command
# ReplyKeyboardRemove –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ loader –∏ utils
from loader import get_db
from bot_utils import get_main_keyboard, check_user_is_channel_admin, check_bot_is_channel_admin, escape_html

router = Router()
logger = logging.getLogger(__name__)


# –ö–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.message(Command("add_channel"))
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel_start(message: types.Message):  # bot –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, –µ–≥–æ –ø–µ—Ä–µ–¥–∞—Å—Ç aiogram –≤ handle_forwarded
    await message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:\n"
        "1. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (—Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π).\n"
        "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
@router.message(F.forward_from_chat)
async def handle_forwarded_channel_message(message: types.Message, bot: Bot):  # bot –Ω—É–∂–µ–Ω –¥–ª—è check_..._admin
    db = get_db()
    user_id_who_adds = message.from_user.id  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
    forwarded_chat = message.forward_from_chat

    if not forwarded_chat:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    if forwarded_chat.type not in ['channel']:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ö–ê–ù–ê–õ–ê.")
        return

    channel_id_telegram = forwarded_chat.id
    channel_title = forwarded_chat.title
    escaped_channel_title = escape_html(channel_title)  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ë–û–¢ –∞–¥–º–∏–Ω–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
    bot_is_admin_with_rights = await check_bot_is_channel_admin(bot, channel_id_telegram)
    if not bot_is_admin_with_rights:
        await message.answer(
            f"‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ ¬´{escaped_channel_title}¬ª "
            f"–∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞."
        )
        return

    try:
        db.execute(
            "INSERT INTO channels (user_id, channel_id, title) VALUES (?, ?, ?)",
            (user_id_who_adds, channel_id_telegram, channel_title),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π title
            commit=True
        )
        logger.info(f"User {user_id_who_adds} added channel {channel_title} ({channel_id_telegram})")
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª ¬´{escaped_channel_title}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_keyboard())
    except sqlite3.IntegrityError:  # –û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (user_id, channel_id)
        logger.warning(f"User {user_id_who_adds} tried to re-add channel {channel_title} ({channel_id_telegram})")
        await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª ¬´{escaped_channel_title}¬ª —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤–∞–º–∏ —Ä–∞–Ω–µ–µ.",
                             reply_markup=get_main_keyboard())
    except sqlite3.Error as e:
        logger.error(f"DB error adding channel for user {user_id_who_adds}: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ú–û–ò–• –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
@router.message(F.text == "üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
@router.message(Command("my_channels"))
async def list_my_channels(message: types.Message):
    db = get_db()
    current_user_id = message.from_user.id

    channels_data = db.fetchall(
        "SELECT id, channel_id, title FROM channels WHERE user_id = ? ORDER BY title",
        (current_user_id,)
    )

    if not channels_data:
        await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
                             "–ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                             reply_markup=get_main_keyboard())
        return

    builder = InlineKeyboardBuilder()
    response_text_parts = ["üì° <b>–í–∞—à–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"]
    for db_id, channel_id_telegram, title in channels_data:
        escaped_title = escape_html(title)
        escaped_channel_id_telegram = escape_html(str(channel_id_telegram))
        response_text_parts.append(f"‚Ä¢ {escaped_title} (ID: <code>{escaped_channel_id_telegram}</code>)")
        builder.row(
            # –í callback_data –ø–µ—Ä–µ–¥–∞–µ–º id –∏–∑ –Ω–∞—à–µ–π –ë–î (PK)
            types.InlineKeyboardButton(text=f"üóëÔ∏è {escaped_title}", callback_data=f"ch_delete_ask_{db_id}")
        )

    await message.answer("\n".join(response_text_parts), reply_markup=builder.as_markup(), parse_mode="HTML")


# –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data.startswith("ch_delete_ask_"))
async def confirm_delete_channel(callback: types.CallbackQuery):
    await callback.answer()
    db_channel_id_to_delete = int(callback.data.split("_")[3])  # ch_delete_ask_ID
    current_user_id = callback.from_user.id
    db = get_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    channel_info = db.fetchone(
        "SELECT title FROM channels WHERE id = ? AND user_id = ?",
        (db_channel_id_to_delete, current_user_id)
    )

    if not channel_info:
        logger.warning(
            f"User {current_user_id} tried to access/delete non-existent or not owned channel (DB ID {db_channel_id_to_delete})")
        await callback.message.edit_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ.")
        return

    channel_title = channel_info[0]
    escaped_channel_title = escape_html(channel_title)

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"ch_delete_do_{db_channel_id_to_delete}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="ch_delete_cancel")  # –û–±—â–∏–π cancel
    )
    await callback.message.edit_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª ¬´{escaped_channel_title}¬ª –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞?\n"
        f"(–≠—Ç–æ –Ω–µ —É–¥–∞–ª–∏—Ç —Å–∞–º Telegram –∫–∞–Ω–∞–ª, —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª—é—á–∏—Ç –µ–≥–æ –æ—Ç –±–æ—Ç–∞ –¥–ª—è –≤–∞—Å.)",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data == "ch_delete_cancel")
async def cancel_delete_channel_action(callback: types.CallbackQuery):
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    # –ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å `message` –æ–±—ä–µ–∫—Ç, –∞ —É –Ω–∞—Å `callback`.
    # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
                                     reply_markup=None)
    # –ï—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª –¥–æ—Å—Ç—É–ø –∫ message –∏–∑ list_my_channels, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –µ–≥–æ –≤—ã–∑–≤–∞—Ç—å.
    # –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤:
    # await list_my_channels(callback.message) # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, callback.message - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    # await callback.message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=await get_channels_for_user_keyboard(callback.from_user.id))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data.startswith("ch_delete_do_"))
async def process_delete_channel(callback: types.CallbackQuery):
    await callback.answer()
    db_channel_id_to_delete = int(callback.data.split("_")[3])  # ch_delete_do_ID
    current_user_id = callback.from_user.id
    db = get_db()

    # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    channel_info = db.fetchone(
        "SELECT title FROM channels WHERE id = ? AND user_id = ?",
        (db_channel_id_to_delete, current_user_id)
    )
    if not channel_info:
        logger.warning(
            f"User {current_user_id} tried to delete non-existent or not owned channel after confirm (DB ID {db_channel_id_to_delete})")
        await callback.message.edit_text("‚ùå –ö–∞–Ω–∞–ª —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    channel_title = channel_info[0]
    escaped_channel_title = escape_html(channel_title)

    try:
        # –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `channels`, –±–ª–∞–≥–æ–¥–∞—Ä—è `ON DELETE CASCADE` –¥–ª—è `posts.user_id`
        # (–µ—Å–ª–∏ –±—ã —Å–≤—è–∑—å –±—ã–ª–∞ posts.channel_db_id -> channels.id), —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –±—ã —É–¥–∞–ª–∏–ª–∏—Å—å.
        # –í —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (posts.channel_id —ç—Ç–æ Telegram ID), –ø–æ—Å—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        # –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–æ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ `channels`,
        # –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ `channels` —á–µ—Ä–µ–∑ JOIN. –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—á–µ—Å—Ç—å –≤ `history.py`.
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        db.execute(
            "DELETE FROM channels WHERE id = ? AND user_id = ?",
            (db_channel_id_to_delete, current_user_id),
            commit=True
        )
        if db.cursor.rowcount > 0:
            logger.info(f"User {current_user_id} deleted channel {channel_title} (DB ID {db_channel_id_to_delete})")
            await callback.message.edit_text(f"‚úÖ –ö–∞–Ω–∞–ª ¬´{escaped_channel_title}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
                                             reply_markup=None, parse_mode="HTML")
        else:  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ–∂–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º —á—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            logger.warning(f"Channel (DB ID {db_channel_id_to_delete}) not found for user {current_user_id} at delete.")
            await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω).",
                                             reply_markup=None)

    except sqlite3.Error as e:
        logger.error(f"DB error deleting channel (DB ID {db_channel_id_to_delete}) for user {current_user_id}: {e}",
                     exc_info=True)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ ¬´{escaped_channel_title}¬ª.",
                                         reply_markup=None, parse_mode="HTML")