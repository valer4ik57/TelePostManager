from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.common import get_main_keyboard
from models.database import Database
from config import DATABASE_NAME
import sqlite3

router = Router()
db = Database(DATABASE_NAME)


class TemplateStates(StatesGroup):
    AWAITING_NAME = State()
    AWAITING_CONTENT = State()

@router.callback_query(F.data == "add_template")
async def add_template_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:")
    await state.set_state(TemplateStates.AWAITING_NAME)
    await callback.answer()



# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
@router.message(F.text == "üìö –®–∞–±–ª–æ–Ω—ã")
async def list_templates_handler(message: types.Message):
    templates = db.cursor.execute("SELECT name FROM templates").fetchall()

    if not templates:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="add_template")]
        ])
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç.", reply_markup=keyboard)
        return

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    for template in templates:
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(text=template[0], callback_data=f"view_template_{template[0]}"),
            types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_ask_{template[0]}"),
        ])
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="add_template"),
        types.InlineKeyboardButton(text="üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", callback_data="show_variables")
    ])

    await message.answer("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:", reply_markup=keyboard)

@router.callback_query(F.data == "show_variables")
async def show_variables_callback(callback: types.CallbackQuery):
    await show_variables(callback.message)
    await callback.answer()


@router.callback_query(F.data.startswith("view_template_"))
async def view_template(callback: types.CallbackQuery):
    template_name = callback.data.split("_")[2]
    template = db.cursor.execute(
        "SELECT content FROM templates WHERE name = ?",
        (template_name,)
    ).fetchone()

    if template:
        await callback.message.answer(f"üìÑ –®–∞–±–ª–æ–Ω ¬´{template_name}¬ª:\n\n{template[0]}")
    else:
        await callback.message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    await callback.answer()

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@router.callback_query(F.data.startswith("use_template_"))
async def use_template(callback: types.CallbackQuery, state: FSMContext):
    template_name = callback.data.split("_")[2]
    template = db.cursor.execute(
        "SELECT content FROM templates WHERE name = ?",
        (template_name,)
    ).fetchone()

    if template:
        await state.update_data(content=template[0])
        await callback.message.answer(f"üìù –®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω: {template[0][:50]}...")
    else:
        await callback.message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@router.callback_query(F.data.startswith("delete_ask_"))
async def ask_delete_template(callback: types.CallbackQuery):
    template_name = callback.data.split("_")[2]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"delete_confirm_{template_name}"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
        ]
    ])
    await callback.message.answer(
        f"‚ùì –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω ¬´{template_name}¬ª?",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("delete_confirm_"))
async def delete_template(callback: types.CallbackQuery):
    template_name = callback.data.split("_")[2]
    db.cursor.execute("DELETE FROM templates WHERE name = ?", (template_name,))
    db.connection.commit()
    await callback.message.answer(f"üóë –®–∞–±–ª–æ–Ω ¬´{template_name}¬ª —É–¥–∞–ª–µ–Ω!")
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: types.CallbackQuery):
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@router.message(Command("save_template"))
async def save_template(message: types.Message, state: FSMContext):
    if message.photo or message.video:
        media = message.photo[-1].file_id if message.photo else message.video.file_id
        await state.update_data(media=media)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:")
    await state.set_state(TemplateStates.AWAITING_NAME)

@router.message(TemplateStates.AWAITING_NAME)
async def process_template_name(message: types.Message, state: FSMContext):
    await state.update_data(template_name=message.text)
    await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞):")
    await state.set_state(TemplateStates.AWAITING_CONTENT)

@router.message(TemplateStates.AWAITING_CONTENT)
async def process_template_content(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_name = data["template_name"]
    content = message.text or message.caption
    media = message.photo[-1].file_id if message.photo else None

    try:
        db.cursor.execute(
            "INSERT INTO templates (name, content, media) VALUES (?, ?, ?)",
            (template_name, content, media)
        )
        db.connection.commit()
        await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω ¬´{template_name}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –®–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.clear()

@router.message(F.text == "üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
async def show_variables(message: types.Message):
    variables_list = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n\n"
        "‚Ä¢ {–¥–∞—Ç–∞} ‚Äî —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "‚Ä¢ {–≤—Ä–µ–º—è} ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú)\n"
        "‚Ä¢ {—Ç–µ–∫—Å—Ç_–Ω–æ–≤–æ—Å—Ç–∏} ‚Äî –≤–∞—à —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ {–∞–≤—Ç–æ—Ä} ‚Äî –≤–∞—à–µ –∏–º—è\n"
        "‚Ä¢ {—Å—Å—ã–ª–∫–∞} ‚Äî –ø—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏"
    )
    await message.answer(variables_list, reply_markup=get_main_keyboard())


