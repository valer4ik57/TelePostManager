import sqlite3
from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from loader import get_db
from bot_utils import get_main_keyboard, escape_html
from post_states import TemplateStates
from filters.admin import IsAdmin
from config import SUPER_ADMIN_ID

router = Router()
logger = logging.getLogger(__name__)

COMMON_TEMPLATE_USER_ID = 0

async def get_templates_for_user(user_id: int) -> list:
    db = get_db()
    query = """
            SELECT id, name, user_id \
            FROM templates
            WHERE user_id = ? \
               OR user_id = ?
            ORDER BY user_id ASC, name ASC \
            """
    return db.fetchall(query, (COMMON_TEMPLATE_USER_ID, user_id))


async def check_if_user_is_admin_for_display(user_id: int) -> bool:
    if user_id == SUPER_ADMIN_ID:
        return True
    db = get_db()
    admin_status = db.fetchone("SELECT is_admin FROM bot_users WHERE user_id = ?", (user_id,))
    return bool(admin_status and admin_status[0] == 1)


async def templates_menu_keyboard_for_user(user_id: int, message_id_to_edit: int | None = None):
    templates_list = await get_templates_for_user(user_id)
    user_can_manage_common_templates = await check_if_user_is_admin_for_display(user_id)

    builder = InlineKeyboardBuilder()
    if templates_list:
        for tpl_id, tpl_name, tpl_user_id in templates_list:
            display_name = escape_html(tpl_name)
            is_personal_template = (tpl_user_id == user_id and tpl_user_id != COMMON_TEMPLATE_USER_ID)

            if tpl_user_id == COMMON_TEMPLATE_USER_ID:
                display_name += " (–û–±—â–∏–π)"

            action_buttons = [
                types.InlineKeyboardButton(text=f"üìÑ {display_name}", callback_data=f"tpl_view_{tpl_id}")
            ]

            if is_personal_template:
                action_buttons.append(types.InlineKeyboardButton(text="‚ùå", callback_data=f"tpl_delete_ask_{tpl_id}"))

            builder.row(*action_buttons)

    builder.row(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —à–∞–±–ª–æ–Ω", callback_data="tpl_add_personal"))

    if user_can_manage_common_templates:
        builder.row(types.InlineKeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å –û–ë–©–ò–ô —à–∞–±–ª–æ–Ω", callback_data="tpl_add_common"))
        manage_common_callback = f"tpl_manage_common"
        builder.row(
            types.InlineKeyboardButton(text="üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–ë–©–ò–ú–ò —à–∞–±–ª–æ–Ω–∞–º–∏", callback_data=manage_common_callback))

    builder.row(types.InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", callback_data="tpl_info_vars")) # –ò–∑–º–µ–Ω–∏–ª callback_data –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tpl_back_to_main"))
    return builder.as_markup()


@router.message(F.text == "üìö –®–∞–±–ª–æ–Ω—ã")
async def templates_menu(message: types.Message, state: FSMContext):
    current_fsm_state = await state.get_state()
    if current_fsm_state and isinstance(current_fsm_state, str) and current_fsm_state.startswith("TemplateStates"):
        await state.clear()
        await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–æ.")

    keyboard = await templates_menu_keyboard_for_user(message.from_user.id, message.message_id)
    user_templates_count_query = await get_templates_for_user(message.from_user.id)

    if not user_templates_count_query:
        await message.answer("üì≠ –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–∏ –æ–±—â–∏–µ, –Ω–∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ).", reply_markup=keyboard)
    else:
        await message.answer("üìö –®–∞–±–ª–æ–Ω—ã (–æ–±—â–∏–µ –∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ):", reply_markup=keyboard)


@router.callback_query(F.data == "tpl_back_to_main")
async def tpl_back_to_main_menu_callback(callback: types.CallbackQuery):
    await callback.answer()
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())


@router.callback_query(F.data == "tpl_info_vars") # –ò–∑–º–µ–Ω–µ–Ω callback_data
async def tpl_info_variables_callback(callback: types.CallbackQuery): # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    await callback.answer()
    info_text = (
        "‚ú® <b>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–∞—Ö</b> ‚ú®\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç–µ —à–∞–±–ª–æ–Ω–∞, "
        "—á—Ç–æ–±—ã –∑–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.\n\n"
        "<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>{[–Ω–∞–∑–≤–∞–Ω–∏–µ_–≤–∞—à–µ–π_–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π]}</code>\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i> <code>{[–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏]}</code> –∏–ª–∏ <code>{[–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞]}</code>\n\n"
        "‚ñ´Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ (–≤–Ω—É—Ç—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏—è).\n"
        "‚ñ´Ô∏è <b>–í–∞–∂–Ω–æ:</b> –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã <code>{</code>, <code>}</code>, <code>[</code>, <code>]</code> –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ <u>–Ω–∞–∑–≤–∞–Ω–∏—è</u> –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.\n"
        "‚ñ´Ô∏è –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –≤—Å–µ —Ç–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ "
        "–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç —É –≤–∞—Å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞:</b>\n"
        "<code>–ü—Ä–∏–≤–µ—Ç, {[–ò–º—è –¥—Ä—É–≥–∞]}! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å {[–°–æ–±—ã—Ç–∏–µ]}!</code>\n\n"
        "–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '–ò–º—è –¥—Ä—É–≥–∞':\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '–°–æ–±—ã—Ç–∏–µ':\n\n"
        "–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ–Ω—å –≥–∏–±–∫–∏–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã!"
    )
    await callback.message.answer(info_text, parse_mode="HTML")


@router.callback_query(F.data == "tpl_add_personal")
async def add_personal_template_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ª–∏—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£—Ç—Ä–µ–Ω–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å'):")
    await state.set_state(TemplateStates.AWAITING_NAME)
    await state.update_data(is_creating_common_template=False, original_message_id=callback.message.message_id)


@router.callback_query(F.data == "tpl_add_common", IsAdmin())
async def add_common_template_start_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –û–ë–©–ï–ì–û —à–∞–±–ª–æ–Ω–∞:")
    await state.set_state(TemplateStates.AWAITING_NAME)
    await state.update_data(is_creating_common_template=True, original_message_id=callback.message.message_id)


@router.callback_query(F.data == "tpl_add_common")
async def add_common_template_not_admin(callback: types.CallbackQuery):
    await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)


@router.message(TemplateStates.AWAITING_NAME, F.text)
async def process_template_name(message: types.Message, state: FSMContext):
    db = get_db()
    template_name = message.text.strip()
    data = await state.get_data()
    is_common_being_created = data.get("is_creating_common_template", False)
    target_user_id_for_db = COMMON_TEMPLATE_USER_ID if is_common_being_created else message.from_user.id
    template_type_description = "–æ–±—â–µ–≥–æ" if is_common_being_created else "–≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ"

    if not template_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    existing_template = db.fetchone(
        "SELECT id FROM templates WHERE user_id = ? AND name = ?",
        (target_user_id_for_db, template_name)
    )
    if existing_template:
        await message.answer(
            f"‚ùå –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {template_type_description} —à–∞–±–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{escape_html(template_name)}¬ª. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    await state.update_data(template_name=template_name)
    try:
        await message.delete()
    except Exception:
        logger.warning(f"Could not delete message with template name request from user {message.from_user.id}")

    await message.answer(
        f"üìÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è {template_type_description} —à–∞–±–ª–æ–Ω–∞ ¬´{escape_html(template_name)}¬ª.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ <code>{[–Ω–∞–∑–≤–∞–Ω–∏–µ]}</code>, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç—å. " # –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç
        "–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –û–î–ù–û —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ."
        "\n\n<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.</i>",
        parse_mode="HTML"
    )
    await state.set_state(TemplateStates.AWAITING_CONTENT)

# ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å handlers/templates.py –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏)
# process_template_content, view_template_callback, delete_... –∏ manage_common_templates_...
# –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.

# ... (–∫–æ–¥ –¥–ª—è view_template_callback –∏ –¥–∞–ª–µ–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏) ...
@router.message(TemplateStates.AWAITING_CONTENT, F.photo | F.video | F.text)
async def process_template_content(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_name = data.get("template_name")
    original_message_id = data.get("original_message_id")

    if not template_name:
        logger.error(f"Template name not found in state for user {message.from_user.id} in AWAITING_CONTENT")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–∏–º—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=get_main_keyboard())
        if original_message_id:
            try:
                keyboard_fallback = await templates_menu_keyboard_for_user(message.from_user.id, original_message_id)
                await message.bot.edit_message_text("–û—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤.", chat_id=message.chat.id,
                                                    message_id=original_message_id, reply_markup=keyboard_fallback)
            except Exception:
                pass
        await state.clear()
        return

    is_common_being_created = data.get("is_creating_common_template", False)
    template_owner_user_id = COMMON_TEMPLATE_USER_ID if is_common_being_created else message.from_user.id
    template_type_description = "–û–±—â–∏–π" if is_common_being_created else "–í–∞—à –ª–∏—á–Ω—ã–π"

    content_from_user = message.text or message.caption
    media_id = None
    media_type_str = None

    if message.photo:
        media_id = message.photo[-1].file_id
        media_type_str = "photo"
    elif message.video:
        media_id = message.video.file_id
        media_type_str = "video"

    if not content_from_user and not media_id:
        await message.answer("–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    final_content_for_db = content_from_user if content_from_user is not None else ""
    try:
        await message.delete()
    except Exception:
        logger.warning(f"Could not delete message with template content from user {message.from_user.id}")

    db = get_db()
    try:
        db.execute(
            "INSERT INTO templates (user_id, name, content, media, media_type) VALUES (?, ?, ?, ?, ?)",
            (template_owner_user_id, template_name, final_content_for_db, media_id, media_type_str),
            commit=True
        )
        logger.info(
            f"{template_type_description} template '{template_name}' (owner: {template_owner_user_id}) saved by user {message.from_user.id}")

        await message.answer(f"‚úÖ {template_type_description} —à–∞–±–ª–æ–Ω ¬´{escape_html(template_name)}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

        if original_message_id:
            if is_common_being_created:
                await manage_common_templates_menu_logic(message.from_user.id, message.bot, original_message_id,
                                                         message.chat.id)
            else:
                keyboard = await templates_menu_keyboard_for_user(message.from_user.id, original_message_id) # –ü–µ—Ä–µ–¥–∞–µ–º ID –¥–ª—è —Ä–µ–¥.
                await message.bot.edit_message_text("üìö –®–∞–±–ª–æ–Ω—ã (–æ–±—â–∏–µ –∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ):",
                                                    chat_id=message.chat.id,
                                                    message_id=original_message_id,
                                                    reply_markup=keyboard)
        else:
            keyboard_fallback = await templates_menu_keyboard_for_user(message.from_user.id)
            await message.answer("üìö –®–∞–±–ª–æ–Ω—ã (–æ–±—â–∏–µ –∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ):", reply_markup=keyboard_fallback)

    except sqlite3.IntegrityError:
        logger.error(f"IntegrityError on template save (owner {template_owner_user_id}, name {template_name}).")
        await message.answer(f"‚ùå –®–∞–±–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{escape_html(template_name)}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.")
    except sqlite3.Error as e:
        logger.error(f"DB error saving template (owner {template_owner_user_id}): {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")
    finally:
        await state.clear()


@router.callback_query(F.data.startswith("tpl_view_"))
async def view_template_callback(callback: types.CallbackQuery):
    await callback.answer()
    tpl_id_to_view = int(callback.data.split("_")[2])
    current_user_id = callback.from_user.id
    db = get_db()

    template_data = db.fetchone(
        "SELECT name, content, media, media_type, user_id FROM templates WHERE id = ? AND (user_id = ? OR user_id = ?)",
        (tpl_id_to_view, current_user_id, COMMON_TEMPLATE_USER_ID)
    )
    if not template_data:
        logger.warning(
            f"User {current_user_id} tried to view non-existent or non-accessible template ID {tpl_id_to_view}")
        keyboard = await templates_menu_keyboard_for_user(current_user_id, callback.message.message_id)
        await callback.message.edit_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=keyboard)
        return

    name, content, media_file_id, media_type_from_db, tpl_owner_id = template_data
    template_type_str = "(–û–±—â–∏–π)" if tpl_owner_id == COMMON_TEMPLATE_USER_ID else "(–õ–∏—á–Ω—ã–π)"

    text_to_send_parts = [f"üìÑ <b>–®–∞–±–ª–æ–Ω ¬´{escape_html(name)}¬ª {template_type_str}</b>"]
    if content:
        text_to_send_parts.append(f"\n{escape_html(content)}")
    else:
        text_to_send_parts.append("\n[–ë–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ]")

    final_caption_for_media = "\n".join(text_to_send_parts)

    if media_file_id:
        media_info_text = "üñºÔ∏è <i>–ö —à–∞–±–ª–æ–Ω—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞.</i>"
        try:
            if media_type_from_db == "photo":
                await callback.message.answer_photo(media_file_id,
                                                    caption=f"{final_caption_for_media}\n{media_info_text}",
                                                    parse_mode="HTML")
            elif media_type_from_db == "video":
                await callback.message.answer_video(media_file_id,
                                                    caption=f"{final_caption_for_media}\n{media_info_text}",
                                                    parse_mode="HTML")
            else:
                logger.warning(f"Unknown media_type '{media_type_from_db}' for template ID {tpl_id_to_view}")
                await callback.message.answer(
                    f"{final_caption_for_media}\n{media_info_text}\n(–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ ID: {escape_html(str(media_file_id))})",
                    parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error displaying media for template ID {tpl_id_to_view}: {e}", exc_info=True)
            await callback.message.answer(
                f"{final_caption_for_media}\n{media_info_text}\n(–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–¥–∏–∞: {escape_html(str(e))})",
                parse_mode="HTML")
    else:
        await callback.message.answer(final_caption_for_media, parse_mode="HTML")


@router.callback_query(F.data.startswith("tpl_delete_ask_"))
async def delete_personal_template_ask_callback(callback: types.CallbackQuery):
    await callback.answer()
    tpl_id_to_delete = int(callback.data.split("_")[3])
    current_user_id = callback.from_user.id
    db = get_db()

    template_data = db.fetchone(
        "SELECT name FROM templates WHERE id = ? AND user_id = ? AND user_id != ?",
        (tpl_id_to_delete, current_user_id, COMMON_TEMPLATE_USER_ID)
    )

    if not template_data:
        logger.warning(
            f"User {current_user_id} tried to delete non-existent, not owned, or common template ID {tpl_id_to_delete} via personal delete.")
        keyboard = await templates_menu_keyboard_for_user(current_user_id, callback.message.message_id)
        await callback.message.edit_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –Ω–µ –≤–∞—à –ª–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω.",
                                         reply_markup=keyboard)
        return

    template_name = template_data[0]
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"tpl_delete_do_{tpl_id_to_delete}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="tpl_delete_personal_cancel")
    )
    await callback.message.edit_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω ¬´{escape_html(template_name)}¬ª?",
        reply_markup=builder.as_markup(), parse_mode="HTML")


@router.callback_query(F.data == "tpl_delete_personal_cancel")
async def delete_personal_template_cancel_callback(callback: types.CallbackQuery):
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    keyboard = await templates_menu_keyboard_for_user(callback.from_user.id, callback.message.message_id)
    await callback.message.edit_text("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("tpl_delete_do_"))
async def delete_personal_template_confirm_callback(callback: types.CallbackQuery):
    await callback.answer()
    tpl_id_to_delete = int(callback.data.split("_")[3])
    current_user_id = callback.from_user.id
    db = get_db()

    template_data = db.fetchone(
        "SELECT name FROM templates WHERE id = ? AND user_id = ? AND user_id != ?",
        (tpl_id_to_delete, current_user_id, COMMON_TEMPLATE_USER_ID)
    )

    if not template_data:
        keyboard = await templates_menu_keyboard_for_user(current_user_id, callback.message.message_id)
        await callback.message.edit_text("–®–∞–±–ª–æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω, –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞—à –ª–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω.",
                                         reply_markup=keyboard)
        return

    template_name = template_data[0]
    try:
        db.execute(
            "DELETE FROM templates WHERE id = ? AND user_id = ?",
            (tpl_id_to_delete, current_user_id),
            commit=True
        )
        if db.cursor.rowcount > 0:
            logger.info(
                f"User {current_user_id} deleted personal template '{template_name}' (DB ID {tpl_id_to_delete})")
            await callback.answer(f"üóë –õ–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω ¬´{escape_html(template_name)}¬ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        else:
            logger.warning(
                f"Personal template (DB ID {tpl_id_to_delete}) not found for user {current_user_id} at delete confirm.")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω.", show_alert=True)

        keyboard = await templates_menu_keyboard_for_user(current_user_id, callback.message.message_id)
        await callback.message.edit_text("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏:", reply_markup=keyboard)
    except sqlite3.Error as e:
        logger.error(f"DB error deleting personal template (DB ID {tpl_id_to_delete}) for user {current_user_id}: {e}",
                     exc_info=True)
        keyboard = await templates_menu_keyboard_for_user(current_user_id, callback.message.message_id)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.",
                                         reply_markup=keyboard)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–ë–©–ò–ú–ò —à–∞–±–ª–æ–Ω–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞) ---

async def manage_common_templates_menu_logic(user_id: int, bot_instance: Bot, message_id_to_edit: int,
                                             chat_id: int):
    db = get_db()
    common_templates = db.fetchall(
        "SELECT id, name FROM templates WHERE user_id = ? ORDER BY name ASC",
        (COMMON_TEMPLATE_USER_ID,)
    )

    builder = InlineKeyboardBuilder()
    if common_templates:
        for tpl_id, tpl_name in common_templates:
            builder.row(
                types.InlineKeyboardButton(text=f"üìÑ {escape_html(tpl_name)}", callback_data=f"tpl_view_{tpl_id}"),
                types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª.",
                                           callback_data=f"tpl_delete_common_ask_{tpl_id}:{message_id_to_edit}")
            )

    builder.row(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –û–ë–©–ò–ô —à–∞–±–ª–æ–Ω", callback_data=f"tpl_add_common"))
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤",
                                           callback_data=f"tpl_back_to_main_tpl_menu:{message_id_to_edit}"))

    try:
        await bot_instance.edit_message_text(
            text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–ë–©–ò–ú–ò —à–∞–±–ª–æ–Ω–∞–º–∏:" + ("\n\n(–û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)" if not common_templates else ""),
            chat_id=chat_id,
            message_id=message_id_to_edit,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error editing common templates menu for user {user_id}, msg_id {message_id_to_edit}: {e}",
                     exc_info=True)


@router.callback_query(F.data.startswith("tpl_manage_common"), IsAdmin())
async def manage_common_templates_menu_callback(callback: types.CallbackQuery):
    await callback.answer()
    await manage_common_templates_menu_logic(callback.from_user.id, callback.bot, callback.message.message_id,
                                             callback.message.chat.id)


@router.callback_query(F.data.startswith("tpl_back_to_main_tpl_menu:"), IsAdmin())
async def back_to_main_templates_menu_from_common_mgm(callback: types.CallbackQuery):
    await callback.answer()
    message_id_to_edit = int(callback.data.split(":")[1])
    # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ–¥–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = await templates_menu_keyboard_for_user(callback.from_user.id, message_id_to_edit)
    try:
        await callback.message.edit_text("üìö –®–∞–±–ª–æ–Ω—ã (–æ–±—â–∏–µ –∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ):", reply_markup=keyboard)
    except Exception as e:
        logger.warning(f"Could not edit message {message_id_to_edit} back to main templates menu: {e}")
        new_keyboard = await templates_menu_keyboard_for_user(callback.from_user.id)
        await callback.message.answer("üìö –®–∞–±–ª–æ–Ω—ã (–æ–±—â–∏–µ –∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ):", reply_markup=new_keyboard)


@router.callback_query(F.data.startswith("tpl_delete_common_ask_"), IsAdmin())
async def delete_common_template_ask_callback(callback: types.CallbackQuery):
    await callback.answer()
    parts = callback.data.split(":")
    tpl_id_to_delete = int(parts[0].split("_")[4])
    original_message_id_for_menu = int(parts[1])
    db = get_db()

    template_data = db.fetchone(
        "SELECT name FROM templates WHERE id = ? AND user_id = ?",
        (tpl_id_to_delete, COMMON_TEMPLATE_USER_ID)
    )

    if not template_data:
        logger.warning(
            f"Admin {callback.from_user.id} tried to delete non-existent common template ID {tpl_id_to_delete}")
        await callback.answer("–û–±—â–∏–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.", show_alert=True)
        await manage_common_templates_menu_logic(callback.from_user.id, callback.bot, original_message_id_for_menu,
                                                 callback.message.chat.id)
        return

    template_name = template_data[0]
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –æ–±—â–∏–π",
                                   callback_data=f"tpl_del_com_do_{tpl_id_to_delete}:{original_message_id_for_menu}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                                   callback_data=f"tpl_del_com_cancel:{original_message_id_for_menu}")
    )
    await callback.message.edit_text(
        f"üëë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –û–ë–©–ò–ô —à–∞–±–ª–æ–Ω ¬´{escape_html(template_name)}¬ª?",
        reply_markup=builder.as_markup(), parse_mode="HTML")


@router.callback_query(F.data.startswith("tpl_del_com_cancel:"), IsAdmin())
async def delete_common_template_cancel_callback(callback: types.CallbackQuery):
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    original_message_id_for_menu = int(callback.data.split(":")[1])
    await manage_common_templates_menu_logic(callback.from_user.id, callback.bot, original_message_id_for_menu,
                                             callback.message.chat.id)


@router.callback_query(F.data.startswith("tpl_del_com_do_"), IsAdmin())
async def delete_common_template_confirm_callback(callback: types.CallbackQuery):
    await callback.answer()
    parts = callback.data.split(":")
    tpl_id_to_delete = int(parts[0].split("_")[4])
    original_message_id_for_menu = int(parts[1])
    db = get_db()

    template_data = db.fetchone(
        "SELECT name FROM templates WHERE id = ? AND user_id = ?",
        (tpl_id_to_delete, COMMON_TEMPLATE_USER_ID)
    )

    if not template_data:
        await callback.answer("–û–±—â–∏–π —à–∞–±–ª–æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await manage_common_templates_menu_logic(callback.from_user.id, callback.bot, original_message_id_for_menu,
                                                 callback.message.chat.id)
        return

    template_name = template_data[0]
    try:
        db.execute(
            "DELETE FROM templates WHERE id = ? AND user_id = ?",
            (tpl_id_to_delete, COMMON_TEMPLATE_USER_ID),
            commit=True
        )
        if db.cursor.rowcount > 0:
            logger.info(
                f"Admin {callback.from_user.id} deleted COMMON template '{template_name}' (DB ID {tpl_id_to_delete})")
            await callback.answer(f"üóë –û–±—â–∏–π —à–∞–±–ª–æ–Ω ¬´{escape_html(template_name)}¬ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        else:
            logger.warning(
                f"COMMON template (DB ID {tpl_id_to_delete}) not found at delete confirm by admin {callback.from_user.id}.")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—â–∏–π —à–∞–±–ª–æ–Ω.", show_alert=True)

    except sqlite3.Error as e:
        logger.error(
            f"DB error deleting COMMON template (DB ID {tpl_id_to_delete}) by admin {callback.from_user.id}: {e}",
            exc_info=True)
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞.", show_alert=True)
    finally:
        await manage_common_templates_menu_logic(callback.from_user.id, callback.bot, original_message_id_for_menu,
                                                 callback.message.chat.id)