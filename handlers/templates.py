# handlers/templates.py
import sqlite3
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from loader import get_db
from bot_utils import get_main_keyboard, escape_html
from post_states import TemplateStates
from filters.admin import IsAdmin  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä IsAdmin

router = Router()
logger = logging.getLogger(__name__)

COMMON_TEMPLATE_USER_ID = 0  # ID –¥–ª—è –æ–±—â–∏—Ö/—Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤

AVAILABLE_TEMPLATE_VARIABLES = {
    "{–¥–∞—Ç–∞}": "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)",
    "{–≤—Ä–µ–º—è}": "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú)",
    "{—Ç–µ–∫—Å—Ç_–Ω–æ–≤–æ—Å—Ç–∏}": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "{–∞–≤—Ç–æ—Ä}": "–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞—é—â–µ–≥–æ –ø–æ—Å—Ç",
}


async def get_templates_for_user(user_id: int) -> list:
    db = get_db()
    query = """
        SELECT id, name, user_id FROM templates 
        WHERE user_id = ? OR user_id = ? 
        ORDER BY user_id ASC, name ASC 
    """
    return db.fetchall(query, (COMMON_TEMPLATE_USER_ID, user_id))


async def check_if_user_is_admin(user_id: int) -> bool:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    db = get_db()
    admin_status = db.fetchone("SELECT is_admin FROM bot_users WHERE user_id = ?", (user_id,))
    return bool(admin_status and admin_status[0] == 1)


async def templates_menu_keyboard_for_user(user_id: int):
    templates_list = await get_templates_for_user(user_id)
    user_is_admin = await check_if_user_is_admin(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    builder = InlineKeyboardBuilder()
    if templates_list:
        for tpl_id, tpl_name, tpl_user_id in templates_list:
            display_name = escape_html(tpl_name)
            is_personal_template = (tpl_user_id == user_id and tpl_user_id != COMMON_TEMPLATE_USER_ID)

            if tpl_user_id == COMMON_TEMPLATE_USER_ID:
                display_name += " (–û–±—â–∏–π)"

            action_buttons = [
                types.InlineKeyboardButton(text=f"üìÑ {display_name}", callback_data=f"tpl_view_{tpl_id}")
            ]

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            if is_personal_template:
                # action_buttons.append(types.InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"tpl_edit_{tpl_id}")) # TODO: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                action_buttons.append(types.InlineKeyboardButton(text="‚ùå", callback_data=f"tpl_delete_ask_{tpl_id}"))
            # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏ –æ–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã (–µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ)
            # elif user_is_admin and tpl_user_id == COMMON_TEMPLATE_USER_ID:
            #     action_buttons.append(types.InlineKeyboardButton(text="‚úèÔ∏è (–û–±—â–∏–π)", callback_data=f"tpl_edit_common_{tpl_id}"))
            #     action_buttons.append(types.InlineKeyboardButton(text="‚ùå (–û–±—â–∏–π)", callback_data=f"tpl_delete_common_ask_{tpl_id}"))

            builder.row(*action_buttons)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –õ–ò–ß–ù–û–ì–û —à–∞–±–ª–æ–Ω–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)
    builder.row(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —à–∞–±–ª–æ–Ω", callback_data="tpl_add_personal"))

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û–ë–©–ï–ì–û —à–∞–±–ª–æ–Ω–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–£)
    if user_is_admin:
        builder.row(types.InlineKeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å –û–ë–©–ò–ô —à–∞–±–ª–æ–Ω", callback_data="tpl_add_common"))
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏

    builder.row(types.InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", callback_data="tpl_show_vars"))
    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tpl_back_to_main"))
    return builder.as_markup()


@router.message(F.text == "üìö –®–∞–±–ª–æ–Ω—ã")
async def templates_menu(message: types.Message, state: FSMContext):
    current_fsm_state = await state.get_state()
    if current_fsm_state and isinstance(current_fsm_state, str) and current_fsm_state.startswith("TemplateStates"):
        await state.clear()
        await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–æ.")

    keyboard = await templates_menu_keyboard_for_user(message.from_user.id)
    user_templates = await get_templates_for_user(message.from_user.id)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    if not user_templates:  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–±—â–∏—Ö, –Ω–∏ –ª–∏—á–Ω—ã—Ö
        await message.answer("üì≠ –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–∏ –æ–±—â–∏–µ, –Ω–∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ).", reply_markup=keyboard)
    else:
        await message.answer("üìö –®–∞–±–ª–æ–Ω—ã (–æ–±—â–∏–µ –∏ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ):", reply_markup=keyboard)


@router.callback_query(F.data == "tpl_back_to_main")
async def tpl_back_to_main_menu_callback(callback: types.CallbackQuery):
    await callback.answer()
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())


@router.callback_query(F.data == "tpl_show_vars")
async def show_template_variables_callback(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    await callback.answer()
    variables_text_parts = ["üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö:</b>\n"]
    for var, desc in AVAILABLE_TEMPLATE_VARIABLES.items():
        variables_text_parts.append(f"<code>{escape_html(var)}</code> ‚Äî {escape_html(desc)}")
    variables_text_parts.append(
        "\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Ç–µ–∫—Å—Ç–µ —à–∞–±–ª–æ–Ω–∞, –∏ –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
    await callback.message.answer("\n".join(variables_text_parts), parse_mode="HTML")


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –õ–ò–ß–ù–û–ì–û —à–∞–±–ª–æ–Ω–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@router.callback_query(F.data == "tpl_add_personal")
async def add_personal_template_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ª–∏—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£—Ç—Ä–µ–Ω–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å'):")
    await state.set_state(TemplateStates.AWAITING_NAME)
    await state.update_data(is_creating_common_template=False)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –æ–±—â–∏–π


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û–ë–©–ï–ì–û —à–∞–±–ª–æ–Ω–∞ (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê)
@router.callback_query(F.data == "tpl_add_common", IsAdmin())  # –ó–∞—â–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–º IsAdmin
async def add_common_template_start_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞.\n"
                                     "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –û–ë–©–ï–ì–û —à–∞–±–ª–æ–Ω–∞:")
    await state.set_state(TemplateStates.AWAITING_NAME)
    await state.update_data(is_creating_common_template=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥


# –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É tpl_add_common (—Ñ–∏–ª—å—Ç—Ä IsAdmin –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
@router.callback_query(F.data == "tpl_add_common")
async def add_common_template_not_admin(callback: types.CallbackQuery):
    await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)


# –≠—Ç–∞–ø—ã AWAITING_NAME –∏ AWAITING_CONTENT —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–ª–∞–≥ is_creating_common_template
@router.message(TemplateStates.AWAITING_NAME, F.text)  # –£–±—Ä–∞–ª F.text, —Ç.–∫. message.text –∏ —Ç–∞–∫ –µ—Å—Ç—å
async def process_template_name(message: types.Message, state: FSMContext):
    db = get_db()
    template_name = message.text.strip()

    data = await state.get_data()
    is_common_being_created = data.get("is_creating_common_template", False)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–ª—è –∫–∞–∫–æ–≥–æ user_id –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
    target_user_id_for_db = COMMON_TEMPLATE_USER_ID if is_common_being_created else message.from_user.id
    template_type_description = "–æ–±—â–µ–≥–æ" if is_common_being_created else "–≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ"

    if not template_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    existing_template = db.fetchone(
        "SELECT id FROM templates WHERE user_id = ? AND name = ?",
        (target_user_id_for_db, template_name)
    )
    if existing_template:
        await message.answer(
            f"‚ùå –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {template_type_description} —à–∞–±–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{escape_html(template_name)}¬ª. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    await state.update_data(template_name=template_name)  # is_creating_common_template —É–∂–µ –≤ state
    await message.answer(
        f"üìÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è {template_type_description} —à–∞–±–ª–æ–Ω–∞ ¬´{escape_html(template_name)}¬ª.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –û–î–ù–û —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ."
    )
    await state.set_state(TemplateStates.AWAITING_CONTENT)


@router.message(TemplateStates.AWAITING_CONTENT, F.photo | F.video | F.text)
async def process_template_content(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_name = data.get("template_name")
    if not template_name:  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø–æ—Ç–µ—Ä—è–ª–æ—Å—å"
        logger.error(f"Template name not found in state for user {message.from_user.id} in AWAITING_CONTENT")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=get_main_keyboard())
        await state.clear()
        return

    is_common_being_created = data.get("is_creating_common_template", False)
    template_owner_user_id = COMMON_TEMPLATE_USER_ID if is_common_being_created else message.from_user.id
    template_type_description = "–û–±—â–∏–π" if is_common_being_created else "–í–∞—à –ª–∏—á–Ω—ã–π"

    content_from_user = message.text or message.caption
    media_id = None
    media_type_str = None

    if message.photo:
        media_id = message.photo[-1].file_id
        media_type_str = "photo"
    elif message.video:
        media_id = message.video.file_id
        media_type_str = "video"

    if not content_from_user and not media_id:
        await message.answer("–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    final_content_for_db = content_from_user if content_from_user is not None else ""

    db = get_db()
    try:
        db.execute(
            "INSERT INTO templates (user_id, name, content, media, media_type) VALUES (?, ?, ?, ?, ?)",
            (template_owner_user_id, template_name, final_content_for_db, media_id, media_type_str),
            commit=True
        )
        logger.info(
            f"{template_type_description} template '{template_name}' (owner: {template_owner_user_id}) saved by user {message.from_user.id}")
        await message.answer(f"‚úÖ {template_type_description} —à–∞–±–ª–æ–Ω ¬´{escape_html(template_name)}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                             reply_markup=get_main_keyboard())
    except sqlite3.IntegrityError:
        logger.error(
            f"IntegrityError on template save (owner {template_owner_user_id}, name {template_name}). Should be caught earlier.")
        await message.answer(
            f"‚ùå –®–∞–±–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{escape_html(template_name)}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ (–æ—à–∏–±–∫–∞).")
    except sqlite3.Error as e:
        logger.error(f"DB error saving template (owner {template_owner_user_id}): {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")
    finally:
        await state.clear()


# –ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç COMMON_TEMPLATE_USER_ID)
@router.callback_query(F.data.startswith("tpl_view_"))
async def view_template_callback(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±—â–∏–µ –∏ –ª–∏—á–Ω—ã–µ) ...
    await callback.answer()
    tpl_id_to_view = int(callback.data.split("_")[2])
    current_user_id = callback.from_user.id
    db = get_db()

    template_data = db.fetchone(
        "SELECT name, content, media, media_type, user_id FROM templates WHERE id = ? AND (user_id = ? OR user_id = ?)",
        (tpl_id_to_view, current_user_id, COMMON_TEMPLATE_USER_ID)
    )
    if not template_data:
        logger.warning(
            f"User {current_user_id} tried to view non-existent or non-accessible template ID {tpl_id_to_view}")
        await callback.message.edit_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                                         reply_markup=await templates_menu_keyboard_for_user(current_user_id))
        return

    name, content, media_file_id, media_type_from_db, tpl_owner_id = template_data
    template_type_str = "(–û–±—â–∏–π)" if tpl_owner_id == COMMON_TEMPLATE_USER_ID else "(–õ–∏—á–Ω—ã–π)"

    text_to_send_parts = [f"üìÑ <b>–®–∞–±–ª–æ–Ω ¬´{escape_html(name)}¬ª {template_type_str}</b>"]
    if content:
        text_to_send_parts.append(f"\n{escape_html(content)}")
    else:
        text_to_send_parts.append("\n[–ë–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ]")
    final_caption_for_media = "\n".join(text_to_send_parts)

    try:  # –û–±–µ—Ä–Ω–µ–º edit_text –≤ try-except –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        await callback.message.edit_text(f"–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞ ¬´{escape_html(name)}¬ª...", reply_markup=None)
    except Exception as e_edit:
        logger.info(f"Could not edit message before viewing template: {e_edit}")

    if media_file_id:
        media_info_text = "üñºÔ∏è <i>–ö —à–∞–±–ª–æ–Ω—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞.</i>"
        try:
            if media_type_from_db == "photo":
                await callback.message.answer_photo(media_file_id,
                                                    caption=f"{final_caption_for_media}\n{media_info_text}",
                                                    parse_mode="HTML")
            elif media_type_from_db == "video":
                await callback.message.answer_video(media_file_id,
                                                    caption=f"{final_caption_for_media}\n{media_info_text}",
                                                    parse_mode="HTML")
            else:
                logger.warning(
                    f"Unknown media_type '{media_type_from_db}' for template ID {tpl_id_to_view} with media_id {media_file_id}")
                await callback.message.answer(
                    f"{final_caption_for_media}\n{media_info_text}\n(–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–µ–¥–∏–∞ ID: {escape_html(media_file_id)})",
                    parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error displaying media for template ID {tpl_id_to_view}: {e}", exc_info=True)
            await callback.message.answer(
                f"{final_caption_for_media}\n{media_info_text}\n(–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–¥–∏–∞: {escape_html(str(e))})",
                parse_mode="HTML")
    else:
        await callback.message.answer(final_caption_for_media, parse_mode="HTML")

    await callback.message.answer("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏:",
                                  reply_markup=await templates_menu_keyboard_for_user(current_user_id))


# –£–¥–∞–ª–µ–Ω–∏–µ –õ–ò–ß–ù–û–ì–û —à–∞–±–ª–æ–Ω–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ)
@router.callback_query(F.data.startswith("tpl_delete_ask_"))
async def delete_template_ask_callback(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç) ...
    await callback.answer()
    tpl_id_to_delete = int(callback.data.split("_")[3])
    current_user_id = callback.from_user.id
    db = get_db()

    template_data = db.fetchone(
        "SELECT name FROM templates WHERE id = ? AND user_id = ?",
        (tpl_id_to_delete, current_user_id)
    )

    if not template_data:
        logger.warning(
            f"User {current_user_id} tried to delete non-existent or not owned template ID {tpl_id_to_delete}")
        await callback.message.edit_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞—à –ª–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω.",
                                         reply_markup=await templates_menu_keyboard_for_user(current_user_id))
        return

    template_name = template_data[0]
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"tpl_delete_do_{tpl_id_to_delete}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="tpl_delete_cancel")
    )
    await callback.message.edit_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω ¬´{escape_html(template_name)}¬ª?",
        reply_markup=builder.as_markup(), parse_mode="HTML")


@router.callback_query(F.data == "tpl_delete_cancel")
async def delete_template_cancel_callback(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.edit_text("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏:",
                                     reply_markup=await templates_menu_keyboard_for_user(callback.from_user.id))


@router.callback_query(F.data.startswith("tpl_delete_do_"))
async def delete_template_confirm_callback(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    await callback.answer()
    tpl_id_to_delete = int(callback.data.split("_")[3])
    current_user_id = callback.from_user.id
    db = get_db()

    template_data = db.fetchone(
        "SELECT name FROM templates WHERE id = ? AND user_id = ?",
        (tpl_id_to_delete, current_user_id)
    )

    if not template_data:
        await callback.message.edit_text("–®–∞–±–ª–æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                         reply_markup=await templates_menu_keyboard_for_user(current_user_id))
        return

    template_name = template_data[0]
    try:
        db.execute(
            "DELETE FROM templates WHERE id = ? AND user_id = ?",
            (tpl_id_to_delete, current_user_id),
            commit=True
        )
        if db.cursor.rowcount > 0:
            logger.info(f"User {current_user_id} deleted template '{template_name}' (DB ID {tpl_id_to_delete})")
            await callback.answer(f"üóë –®–∞–±–ª–æ–Ω ¬´{escape_html(template_name)}¬ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        else:
            logger.warning(
                f"Template (DB ID {tpl_id_to_delete}) not found for user {current_user_id} at delete confirm.")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω.", show_alert=True)

        await callback.message.edit_text("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏:",
                                         reply_markup=await templates_menu_keyboard_for_user(current_user_id))
    except sqlite3.Error as e:
        logger.error(f"DB error deleting template (DB ID {tpl_id_to_delete}) for user {current_user_id}: {e}",
                     exc_info=True)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.",
                                         reply_markup=await templates_menu_keyboard_for_user(current_user_id))

# TODO: –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –û–ë–©–ò–ú–ò —à–∞–±–ª–æ–Ω–∞–º–∏ (—É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
# –ù–∞–ø—Ä–∏–º–µ—Ä, tpl_delete_common_ask_ID, tpl_edit_common_ID, –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ IsAdmin()